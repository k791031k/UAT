[{
    "id": "清除快取工具",
    "description": "電腦一直跳很煩對吧，點我就對了，但可能會登出喔",
    "category": "系統工具",
    "type": "utility",
    "action_script": "javascript:(function() {\n    /**\n     * @description 清除快取工具，用於清除 Cookies, localStorage, sessionStorage 和 Service Workers。\n     * @author Gemini\n     */\n\n    // 用於追蹤各項清除操作的狀態\n    let stats = {\n        cookies: 0,\n        localStorage: 0,\n        sessionStorage: 0,\n        serviceWorkers: 0,\n        fail: ''\n    };\n\n    /**\n     * @description 顯示操作結果的通知訊息。\n     */\n    const showFeedback = () => {\n        let container = document.createElement('div');\n        container.style = 'position:fixed;top:20px;right:20px;padding:15px;background:#' + (stats.fail ? 'ffebee' : 'e8f5e9') + ';border:1px solid #' + (stats.fail ? 'ef9a9a' : 'a5d6a7') + ';border-radius:5px;box-shadow:0 2px 10px rgba(0,0,0,0.1);z-index:9999;max-width:300px;font-family:Arial;';\n\n        let successMessage = ['Cookies', 'localStorage', 'sessionStorage', 'Service Workers'].filter(key => stats[key.toLowerCase().replace(' ', '')]).join(', ');\n        if (!successMessage) successMessage = '無';\n\n        container.innerHTML = `\n            <div style=\"margin-bottom:10px;font-weight:bold\">${stats.fail ? '清理完成！ (部分失敗)' : '清理完成！'}</div>\n            <div style=\"margin-bottom:8px\">✅ 成功：${successMessage}</div>\n            ${stats.fail ? `<div style=\"color:#d32f2f;margin-bottom:8px\">❌ 失敗：${stats.fail.trim()}</div>` : ''}\n            <button style=\"padding:5px 10px;background:#2196f3;color:white;border:none;border-radius:3px;cursor:pointer;\" onclick=\"this.parentNode.remove()\">關閉</button>\n        `;\n\n        document.body.appendChild(container);\n        setTimeout(() => container.remove(), 5000); // 延長顯示時間，方便查看\n    };\n\n    // --- 清除邏輯 ---\n\n    // 1. 清除 Cookies\n    try {\n        document.cookie.split(';').forEach(cookie => {\n            let eqPos = cookie.indexOf('=');\n            let name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\n            document.cookie = name.trim() + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/';\n        });\n        stats.cookies = 1;\n    } catch (e) {\n        stats.fail += 'Cookies ';\n    }\n\n    // 2. 清除 localStorage\n    try {\n        localStorage.clear();\n        stats.localStorage = 1;\n    } catch (e) {\n        stats.fail += 'localStorage ';\n    }\n\n    // 3. 清除 sessionStorage\n    try {\n        sessionStorage.clear();\n        stats.sessionStorage = 1;\n    } catch (e) {\n        stats.fail += 'sessionStorage ';\n    }\n\n    // 4. 清除 Service Workers\n    if ('serviceWorker' in navigator && navigator.serviceWorker.getRegistrations) {\n        navigator.serviceWorker.getRegistrations().then(registrations => {\n            if (registrations.length > 0) {\n                registrations.forEach(registration => registration.unregister());\n                stats.serviceWorkers = 1;\n            }\n            showFeedback(); // 非同步操作完成後顯示訊息\n        }).catch(e => {\n            stats.fail += 'ServiceWorkers ';\n            showFeedback(); // 即使失敗也要顯示訊息\n        });\n    } else {\n        showFeedback(); // 如果不支援 Service Worker，直接顯示結果\n    }\n})();"
  },
  {
    "id": "webUI",
    "description": "網頁助理",
    "category": "系統工具",
    "type": "utility",
    "action_script": "external:https://cdn.jsdelivr.net/gh/k791031k/TRY/webUI1.js?v=%27+Date.now()"
  },
  {
    "id": "編輯",
    "description": "就是編輯啊",
    "category": "系統工具",
    "type": "utility",
    "action_script": "javascript:(function() {\n    /**\n     * @description 切換網頁的可編輯模式。\n     * 啟用時，頁面所有內容變為可編輯，並移除元素的 readonly 和 disabled 屬性。\n     * 停用時，恢復頁面的不可編輯狀態，並嘗試恢復元素的 readonly 和 disabled 屬性。\n     * @author Gemini\n     */\n\n    // 檢查目前 body 的 contentEditable 狀態\n    var isEditable = document.body.contentEditable === 'true';\n\n    if (isEditable) {\n        // 如果目前是可編輯模式，則關閉它\n        document.body.contentEditable = 'false';\n        \n        // 重新將頁面中所有元素的 readonly 和 disabled 屬性設為 true\n        // 注意：這無法完美還原原始狀態，僅為一個通用處理\n        var elements = document.querySelectorAll('[readonly], [disabled]');\n        elements.forEach(function(element) {\n            if (!element.hasAttribute('data-original-readonly')) {\n                element.setAttribute('readonly', 'true');\n            }\n            if (!element.hasAttribute('data-original-disabled')) {\n                element.setAttribute('disabled', 'true');\n            }\n        });\n\n    } else {\n        // 如果目前是不可編輯模式，則開啟它\n        document.body.contentEditable = 'true';\n\n        // 遍歷所有 readonly 或 disabled 的元素，並移除這些屬性以使其可編輯\n        var elements = document.querySelectorAll('[readonly], [disabled]');\n        elements.forEach(function(element) {\n            // 可以在移除前保存原始狀態，以便更精確地還原\n            if (element.hasAttribute('readonly')) {\n                element.setAttribute('data-original-readonly', 'true');\n                element.removeAttribute('readonly');\n            }\n            if (element.hasAttribute('disabled')) {\n                element.setAttribute('data-original-disabled', 'true');\n                element.removeAttribute('disabled');\n            }\n        });\n    }\n})();"
  },
  {
    "id": "商品查詢",
    "description": "現售停售通路都可以查",
    "category": "商品",
    "type": "utility",
    "action_script": "external:https://cdn.jsdelivr.net/gh/k791031k/TRY/nGplan.js?v=%27+Date.now()"
  },
  {
    "id": "age1",
    "description": "保險年齡",
    "category": "工具",
    "type": "utility",
    "action_script": "external:https://cdn.jsdelivr.net/gh/k791031k/UAT/tools/age1.js?v=%27+Date.now()"
  },
  {
    "id": "A17ok06",
    "description": "a17",
    "category": "a17",
    "type": "utility",
    "action_script": "javascript:(async () => {\n\n    /************************************************************************\n     * *\n     * A17 案件查詢與報表工具                           *\n     * *\n     * 本工具提供一個完整的 UI 介面，用於查詢案件資料、處理 A17 報表，      *\n     * 並支援從 CSV 檔案匯入資料進行合併與比對。                           *\n     * *\n     ************************************************************************/\n\n\n    // =======================================================================\n    // MODULE: 組態與常數設定 (Configuration & Constants)\n    // -----------------------------------------------------------------------\n    // 定義所有固定不變的設定值，如 API URL、儲存鍵名、UI ID、欄位定義等。\n    // =======================================================================\n\n    const API_URL_UAT = 'https://euisv-uat.apps.tocp4.kgilife.com.tw/euisw/euisb/api/caseQuery/query';\n    const API_URL_PROD = 'https://euisv.apps.ocp4.kgilife.com.tw/euisw/euisb/api/caseQuery/query';\n    const TOKEN_STORAGE_KEY = 'euisToken';\n    const A17_TEXT_SETTINGS_STORAGE_KEY = 'kgilifeQueryTool_A17TextSettings_v3';\n    const TOOL_MAIN_CONTAINER_ID = 'kgilifeQueryToolMainContainer_vFinal';\n    const Z_INDEX_OVERLAY = 2147483640;\n    const Z_INDEX_MAIN_UI = 2147483630;\n    const Z_INDEX_NOTIFICATION = 2147483647;\n\n    const QUERYABLE_FIELD_DEFINITIONS = [\n        { queryApiKey: 'receiptNumber', queryDisplayName: '送金單號碼', color: '#007bff' },\n        { queryApiKey: 'applyNumber', queryDisplayName: '受理號碼', color: '#6f42c1' },\n        { queryApiKey: 'policyNumber', queryDisplayName: '保單號碼', color: '#28a745' },\n        { queryApiKey: 'approvalNumber', queryDisplayName: '確認書編號', color: '#fd7e14' },\n        { queryApiKey: 'insuredId', queryDisplayName: '被保人ＩＤ', color: '#17a2b8' }\n    ];\n\n    const FIELD_DISPLAY_NAMES_MAP = {\n        applyNumber: '受理號碼',\n        policyNumber: '保單號碼',\n        approvalNumber: '確認書編號',\n        receiptNumber: '送金單',\n        insuredId: '被保人ＩＤ',\n        statusCombined: '狀態',\n        mainStatus: '主狀態',\n        subStatus: '次狀態',\n        uwApproverUnit: '分公司',\n        uwApprover: '核保員',\n        approvalUser: '覆核',\n        _queriedValue_: '查詢值',\n        NO: '序號',\n        _apiQueryStatus: '查詢結果'\n    };\n\n    const ALL_DISPLAY_FIELDS_API_KEYS_MAIN = ['applyNumber', 'policyNumber', 'approvalNumber', 'receiptNumber', 'insuredId', 'statusCombined', 'uwApproverUnit', 'uwApprover', 'approvalUser'];\n\n    const UNIT_CODE_MAPPINGS = {\n        H: '核保部', B: '北一', C: '台中', K: '高雄', N: '台南', P: '北二', T: '桃竹', G: '保作'\n    };\n\n    const A17_UNIT_BUTTONS_DEFS = [\n        { id: 'H', label: 'H-總公司', color: '#007bff' },\n        { id: 'B', label: 'B-北一', color: '#28a745' },\n        { id: 'P', label: 'P-北二', color: '#ffc107' },\n        { id: 'T', label: 'T-桃竹', color: '#17a2b8' },\n        { id: 'C', label: 'C-台中', color: '#fd7e14' },\n        { id: 'N', label: 'N-台南', color: '#6f42c1' },\n        { id: 'K', label: 'K-高雄', color: '#e83e8c' },\n        { id: 'UNDEF', label: '查無單位', color: '#546e7a' }\n    ];\n\n    const UNIT_MAP_FIELD_API_KEY = 'uwApproverUnit';\n    const A17_DEFAULT_TEXT_CONTENT = \"DEAR,\\n\\n依據【管理報表：A17 新契約異常帳務】所載內容，報表中列示之送金單號碼，涉及多項帳務異常情形，例如：溢繳、短收、取消件需退費、以及無相對應之案件等問題。\\n\\n本週我們已逐筆查詢該等異常帳務，結果顯示，這些送金單應對應至下表所列之新契約案件。為利後續帳務處理，敬請協助確認各案件之實際帳務狀況，並如有需調整或處理事項，請一併協助辦理，謝謝。\";\n\n\n    // =======================================================================\n    // MODULE: 全域狀態管理 (Global State Management)\n    // -----------------------------------------------------------------------\n    // 存放整個工具執行期間需要共享與變動的狀態資料。\n    // =======================================================================\n\n    let CURRENT_API_URL = '';\n    let apiAuthToken = localStorage.getItem(TOKEN_STORAGE_KEY);\n    let selectedQueryDefinitionGlobal = QUERYABLE_FIELD_DEFINITIONS[0];\n    let originalQueryResults = [];\n    let baseA17MasterData = [];\n\n    let currentTableInstance = {\n        sortDirections: {},\n        currentHeaders: [],\n        isA17Mode: false,\n        mainUIElement: null,\n        tableBodyElement: null,\n        tableHeadElement: null,\n        a17UnitButtonsContainer: null,\n    };\n\n    let a17ModeState = {\n        isActive: false,\n        selectedUnits: new Set(),\n        textSettings: {\n            mainContent: A17_DEFAULT_TEXT_CONTENT,\n            mainFontSize: 12,\n            mainLineHeight: 1.5,\n            mainFontColor: '#333333',\n            dateFontSize: 8,\n            dateLineHeight: 1.2,\n            dateFontColor: '#555555',\n            genDateOffset: -3,\n            compDateOffset: 0,\n        },\n    };\n\n    let csvImportState = {\n        fileName: '',\n        rawHeaders: [],\n        rawData: [],\n        selectedColForQueryName: null,\n        selectedColsForA17Merge: [],\n        isA17CsvPrepared: false,\n    };\n\n    let isEditMode = false;\n    let dragState = { dragging: false, startX: 0, startY: 0, initialX: 0, initialY: 0 };\n    let a17ButtonLongPressTimer = null;\n\n\n    // =======================================================================\n    // MODULE: 通用工具函式 (Utility Functions)\n    // -----------------------------------------------------------------------\n    // 提供各種可重用的輔助功能，如 HTML 跳脫、顯示通知、字串處理等。\n    // =======================================================================\n\n    /**\n     * 對字串進行 HTML 跳脫，防止 XSS 攻擊。\n     * @param {string} unsafe - 未經處理的原始字串。\n     * @returns {string} - 已跳脫的 HTML 安全字串。\n     */\n    function escapeHtml(unsafe) {\n        if (typeof unsafe !== 'string') return unsafe === null || unsafe === undefined ? '' : String(unsafe);\n        return unsafe.replace(/[&<>'\"']/g, m => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#039;' })[m]);\n    }\n\n    /**\n     * 在畫面右上角顯示系統通知訊息。\n     * @param {string} message - 要顯示的訊息內容。\n     * @param {boolean} isError - 是否為錯誤訊息 (影響顏色)。\n     * @param {number} duration - 訊息顯示的持續時間 (毫秒)。\n     */\n    function displaySystemNotification(message, isError = false, duration = 3000) {\n        const id = TOOL_MAIN_CONTAINER_ID + '_Notification';\n        document.getElementById(id)?.remove();\n        const n = document.createElement('div');\n        n.id = id;\n        n.style.cssText = `position:fixed;top:20px;right:20px;background-color:${isError ? '#dc3545' : '#28a745'};color:white;padding:10px 15px;border-radius:5px;z-index:${Z_INDEX_NOTIFICATION};font-size:14px;font-family:'Microsoft JhengHei',Arial,sans-serif;box-shadow:0 2px 10px rgba(0,0,0,0.2);transform:translateX(calc(100% + 25px));transition:transform 0.3s ease-in-out;display:flex;align-items:center;`;\n        const i = document.createElement('span');\n        i.style.marginRight = '8px';\n        i.style.fontSize = '16px';\n        i.innerHTML = isError ? '&#x26A0;' : '&#x2714;';\n        n.appendChild(i);\n        n.appendChild(document.createTextNode(message));\n        document.body.appendChild(n);\n        setTimeout(() => n.style.transform = 'translateX(0)', 50);\n        setTimeout(() => {\n            n.style.transform = 'translateX(calc(100% + 25px))';\n            setTimeout(() => n.remove(), 300);\n        }, duration);\n    }\n    \n    /**\n     * 從包含姓名和代碼的字串中提取姓名部分。\n     * @param {string} strVal - 原始字串。\n     * @returns {string} - 提取出的姓名。\n     */\n    function extractName(strVal) {\n        if (!strVal || typeof strVal !== 'string') return '';\n        const matchResult = strVal.match(/^[\\u4e00-\\u9fa5\\uff0a*\\u00b7\\uff0e]+/);\n        return matchResult ? matchResult[0] : strVal.split(' ')[0];\n    }\n\n    /**\n     * 從單位字串中提取第一個英文字母作為代碼。\n     * @param {string} unitString - 單位字串。\n     * @returns {string} - 第一個大寫英文字母，若無則返回 'Z'。\n     */\n    function getFirstLetter(unitString) {\n        if (!unitString || typeof unitString !== 'string') return 'Z';\n        for (let i = 0; i < unitString.length; i++) {\n            const char = unitString.charAt(i).toUpperCase();\n            if (/[A-Z]/.test(char)) return char;\n        }\n        return 'Z';\n    }\n\n    /**\n     * 將 Date 物件格式化為 YYYYMMDD 字串。\n     * @param {Date} date - 日期物件。\n     * @returns {string} - 格式化後的日期字串。\n     */\n    function formatDate(date) {\n        const y = date.getFullYear();\n        const m = String(date.getMonth() + 1).padStart(2, '0');\n        const d = String(date.getDate()).padStart(2, '0');\n        return `${y}${m}${d}`;\n    }\n\n\n    // =======================================================================\n    // MODULE: UI 對話方塊 (UI Dialogs)\n    // -----------------------------------------------------------------------\n    // 包含所有用於與使用者互動的彈出式對話方塊的建立函式。\n    // =======================================================================\n\n    /**\n     * 創建一個對話方塊的基礎結構 (遮罩層和對話方塊本身)。\n     * @param {string} idSuffix - 對話方塊 ID 的後綴。\n     * @param {string} contentHtml - 對話方塊內部的 HTML 內容。\n     * @param {string} minWidth - 最小寬度。\n     * @param {string} maxWidth - 最大寬度。\n     * @param {string} customStyles - 其他自訂 CSS。\n     * @returns {{overlay: HTMLElement, dialog: HTMLElement}} - 包含遮罩層和對話方塊元素的物件。\n     */\n    function createDialogBase(idSuffix, contentHtml, minWidth = '350px', maxWidth = '600px', customStyles = '') {\n        const id = TOOL_MAIN_CONTAINER_ID + idSuffix;\n        document.getElementById(id + '_overlay')?.remove();\n        const overlay = document.createElement('div');\n        overlay.id = id + '_overlay';\n        overlay.style.cssText = `position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.6);z-index:${Z_INDEX_OVERLAY};display:flex;align-items:center;justify-content:center;font-family:'Microsoft JhengHei',Arial,sans-serif;backdrop-filter:blur(2px);`;\n        const dialog = document.createElement('div');\n        dialog.id = id + '_dialog';\n        dialog.style.cssText = `background:#fff;padding:20px 25px;border-radius:8px;box-shadow:0 5px 20px rgba(0,0,0,0.25);min-width:${minWidth};max-width:${maxWidth};width:auto;animation:qtDialogAppear 0.2s ease-out;${customStyles}`;\n        dialog.innerHTML = contentHtml;\n        overlay.appendChild(dialog);\n        document.body.appendChild(overlay);\n        const styleEl = document.createElement('style');\n        styleEl.textContent = `\n            @keyframes qtDialogAppear{from{opacity:0;transform:scale(0.95)}to{opacity:1;transform:scale(1)}}\n            .qt-dialog-btn{border:none;padding:8px 15px;border-radius:4px;font-size:13px;cursor:pointer;transition:opacity 0.2s ease,transform 0.1s ease;font-weight:500;margin-left:8px;}\n            .qt-dialog-btn:hover{opacity:0.85;}\n            .qt-dialog-btn:active{transform:scale(0.98);}\n            .qt-dialog-btn-blue{background:#007bff;color:white;}.qt-dialog-btn-grey{background:#6c757d;color:white;}\n            .qt-dialog-btn-red{background:#dc3545;color:white;}.qt-dialog-btn-orange{background:#fd7e14;color:white;}\n            .qt-dialog-btn-green{background:#28a745;color:white;}.qt-dialog-title{margin:0 0 15px 0;color:#333;font-size:18px;text-align:center;font-weight:600;}\n            .qt-input,.qt-textarea,.qt-select{width:calc(100% - 18px);padding:9px;border:1px solid #ccc;border-radius:4px;font-size:13px;margin-bottom:15px;color:#333;box-sizing:border-box;}\n            .qt-textarea{min-height:70px;resize:vertical;}.qt-dialog-flex-end{display:flex;justify-content:flex-end;margin-top:15px;}\n            .qt-dialog-flex-between{display:flex;justify-content:space-between;align-items:center;margin-top:15px;}\n        `;\n        dialog.appendChild(styleEl);\n        return { overlay, dialog };\n    }\n\n    /**\n     * 創建環境選擇對話方塊 (UAT/PROD)。\n     * @returns {Promise<string|null>} - 返回 'test', 'prod' 或 null (取消)。\n     */\n    function createEnvSelectionDialog() {\n        return new Promise(resolve => {\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">選擇查詢環境</h3>\n                <div style=\"display:flex; gap:10px; justify-content:center;\">\n                    <button id=\"qt-env-uat\" class=\"qt-dialog-btn qt-dialog-btn-green\" style=\"flex-grow:1;\">測試 (UAT)</button>\n                    <button id=\"qt-env-prod\" class=\"qt-dialog-btn qt-dialog-btn-orange\" style=\"flex-grow:1;\">正式 (PROD)</button>\n                </div>\n                <div style=\"text-align:center; margin-top:15px;\">\n                    <button id=\"qt-env-cancel\" class=\"qt-dialog-btn qt-dialog-btn-grey\">取消</button>\n                </div>`;\n            const { overlay } = createDialogBase('_EnvSelect', contentHtml, '300px', 'auto');\n            const closeDialog = (value) => {\n                overlay.remove();\n                document.removeEventListener('keydown', escListener);\n                resolve(value);\n            };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog(null); };\n            document.addEventListener('keydown', escListener);\n            overlay.querySelector('#qt-env-uat').onclick = () => closeDialog('test');\n            overlay.querySelector('#qt-env-prod').onclick = () => closeDialog('prod');\n            overlay.querySelector('#qt-env-cancel').onclick = () => closeDialog(null);\n        });\n    }\n\n    /**\n     * 創建 API Token 輸入對話方塊。\n     * @param {number} attempt - 目前的嘗試次數，用於顯示失敗訊息。\n     * @returns {Promise<string|null>} - 返回使用者輸入的 token 或特殊指令字串。\n     */\n    function createTokenDialog(attempt = 1) {\n        return new Promise(resolve => {\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">API TOKEN 設定</h3>\n                <input type=\"password\" id=\"qt-token-input\" class=\"qt-input\" placeholder=\"請輸入您的 API TOKEN\">\n                ${attempt > 1 ? `<p style=\"color:red; font-size:12px; text-align:center; margin-bottom:10px;\">Token驗證失敗，請重新輸入。</p>` : ''}\n                <div class=\"qt-dialog-flex-between\">\n                    <button id=\"qt-token-skip\" class=\"qt-dialog-btn qt-dialog-btn-orange\">略過</button>\n                    <div>\n                        <button id=\"qt-token-close-tool\" class=\"qt-dialog-btn qt-dialog-btn-red\">關閉工具</button>\n                        <button id=\"qt-token-ok\" class=\"qt-dialog-btn qt-dialog-btn-blue\">${attempt > 1 ? '重試' : '確定'}</button>\n                    </div>\n                </div>`;\n            const { overlay } = createDialogBase('_Token', contentHtml, '320px', 'auto');\n            const inputEl = overlay.querySelector('#qt-token-input');\n            inputEl.focus();\n            if (attempt > 2) {\n                const okBtn = overlay.querySelector('#qt-token-ok');\n                okBtn.disabled = true;\n                okBtn.style.opacity = '0.5';\n                okBtn.style.cursor = 'not-allowed';\n                displaySystemNotification('Token多次驗證失敗', true, 4000);\n            }\n            const closeDialog = (value) => {\n                overlay.remove();\n                document.removeEventListener('keydown', escListener);\n                resolve(value);\n            };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog('_token_dialog_cancel_'); };\n            document.addEventListener('keydown', escListener);\n            overlay.querySelector('#qt-token-ok').onclick = () => closeDialog(inputEl.value.trim());\n            overlay.querySelector('#qt-token-close-tool').onclick = () => closeDialog('_close_tool_');\n            overlay.querySelector('#qt-token-skip').onclick = () => closeDialog('_skip_token_');\n        });\n    }\n\n    /**\n     * 創建查詢設定對話方塊，讓使用者選擇查詢欄位、輸入查詢值及匯入CSV。\n     * @returns {Promise<object|null>} - 返回包含查詢設定的物件或 null。\n     */\n    function createQuerySetupDialog() {\n        return new Promise(resolve => {\n            const queryButtonsHtml = QUERYABLE_FIELD_DEFINITIONS.map(def => `<button class=\"qt-querytype-btn\" data-apikey=\"${def.queryApiKey}\" style=\"background-color:${def.color}; color:white; border: 2px solid transparent; padding: 8px 10px; flex-grow: 1; border-radius: 4px; font-size: 13px; font-weight: 500; cursor: pointer;\">${escapeHtml(def.queryDisplayName)}</button>`).join('');\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">查詢條件設定</h3>\n                <div style=\"margin-bottom:10px; font-size:13px; color:#555;\">選擇查詢欄位類型：</div>\n                <div id=\"qt-querytype-buttons\" style=\"display:flex; flex-wrap:wrap; gap:8px; margin-bottom:15px;\">${queryButtonsHtml}</div>\n                <div style=\"margin-bottom:5px; font-size:13px; color:#555;\">輸入查詢值 (可多筆，以換行/空格/逗號/分號分隔)：</div>\n                <textarea id=\"qt-queryvalues-input\" class=\"qt-textarea\" placeholder=\"請先選擇上方查詢欄位類型\"></textarea>\n                <div style=\"margin-bottom:15px;\">\n                    <button id=\"qt-csv-import-btn\" class=\"qt-dialog-btn qt-dialog-btn-grey\" style=\"margin-left:0;\">從CSV/TXT匯入...</button>\n                    <span id=\"qt-csv-filename-display\" style=\"font-size:12px; color:#666; margin-left:10px;\"></span>\n                </div>\n                <div class=\"qt-dialog-flex-between\">\n                    <button id=\"qt-clear-all-input-btn\" class=\"qt-dialog-btn qt-dialog-btn-orange\">清除所有輸入</button>\n                    <div>\n                        <button id=\"qt-querysetup-cancel\" class=\"qt-dialog-btn qt-dialog-btn-grey\">取消</button>\n                        <button id=\"qt-querysetup-ok\" class=\"qt-dialog-btn qt-dialog-btn-blue\">開始查詢</button>\n                    </div>\n                </div>\n                <input type=\"file\" id=\"qt-file-input-hidden\" accept=\".csv,.txt\" style=\"display:none;\">`;\n            const { overlay, dialog } = createDialogBase('_QuerySetup', contentHtml, '480px', 'auto');\n            const queryValuesInput = overlay.querySelector('#qt-queryvalues-input');\n            const typeButtons = overlay.querySelectorAll('.qt-querytype-btn');\n            const csvImportBtn = overlay.querySelector('#qt-csv-import-btn');\n            const fileInputHidden = overlay.querySelector('#qt-file-input-hidden');\n            const csvFilenameDisplay = overlay.querySelector('#qt-csv-filename-display');\n\n            function setActiveButton(apiKey) {\n                typeButtons.forEach(btn => {\n                    const isSelected = btn.dataset.apikey === apiKey;\n                    btn.style.border = isSelected ? `2px solid ${btn.style.backgroundColor}` : '2px solid transparent';\n                    btn.style.boxShadow = isSelected ? `0 0 8px ${btn.style.backgroundColor}70` : 'none';\n                    if (isSelected) {\n                        selectedQueryDefinitionGlobal = QUERYABLE_FIELD_DEFINITIONS.find(d => d.queryApiKey === apiKey);\n                        queryValuesInput.placeholder = `請輸入${selectedQueryDefinitionGlobal.queryDisplayName}(可多筆...)`;\n                    }\n                });\n            }\n\n            typeButtons.forEach(btn => btn.onclick = () => { setActiveButton(btn.dataset.apikey); queryValuesInput.focus() });\n            setActiveButton(selectedQueryDefinitionGlobal.queryApiKey);\n\n            csvImportBtn.onclick = () => fileInputHidden.click();\n            fileInputHidden.onchange = async (e) => {\n                const file = e.target.files[0];\n                if (!file) return;\n                csvFilenameDisplay.textContent = `已選: ${file.name}`;\n                try {\n                    const text = await file.text();\n                    const lines = text.split(/\\r?\\n/).filter(line => line.trim() !== '');\n                    if (lines.length === 0) { displaySystemNotification('CSV檔案為空', true); return; }\n                    const headers = lines[0].split(/,|;|\\t/).map(h => h.trim().replace(/^\"|\"$/g, ''));\n\n                    const purpose = await createCSVPurposeDialog();\n                    if (!purpose) { csvFilenameDisplay.textContent = ''; fileInputHidden.value = ''; return; }\n\n                    if (purpose === 'fillQueryValues') {\n                        const columnIndex = await createCSVColumnSelectionDialog(headers, \"選擇包含查詢值的欄位：\");\n                        if (columnIndex === null || columnIndex === undefined) { csvFilenameDisplay.textContent = ''; fileInputHidden.value = ''; return; }\n                        const values = [];\n                        for (let i = 1; i < lines.length; i++) {\n                            const cols = lines[i].split(/,|;|\\t/).map(c => c.trim().replace(/^\"|\"$/g, ''));\n                            if (cols[columnIndex] && cols[columnIndex].trim() !== \"\") values.push(cols[columnIndex].trim());\n                        }\n                        queryValuesInput.value = Array.from(new Set(values)).join('\\n');\n                        displaySystemNotification('查詢值已從CSV填入', false);\n                        csvImportState = { ...csvImportState, fileName: file.name, rawHeaders: headers, rawData: lines.slice(1).map(line => line.split(/,|;|\\t/).map(c => c.trim().replace(/^\"|\"$/g, ''))), selectedColForQueryName: headers[columnIndex], isA17CsvPrepared: false, selectedColsForA17Merge: [] };\n                    } else if (purpose === 'prepareA17Merge') {\n                        const selectedHeadersForA17 = await createCSVColumnCheckboxDialog(headers, \"勾選要在A17表格中顯示的CSV欄位：\");\n                        if (!selectedHeadersForA17 || selectedHeadersForA17.length === 0) { csvFilenameDisplay.textContent = ''; fileInputHidden.value = ''; return; }\n                        csvImportState = { ...csvImportState, fileName: file.name, rawHeaders: headers, rawData: lines.slice(1).map(line => line.split(/,|;|\\t/).map(c => c.trim().replace(/^\"|\"$/g, ''))), selectedColsForA17Merge: selectedHeadersForA17, isA17CsvPrepared: true, selectedColForQueryName: null };\n                        displaySystemNotification(`已選 ${selectedHeadersForA17.length} 個CSV欄位供A17合併`, false);\n                    }\n                } catch (err) {\n                    console.error(\"處理CSV錯誤:\", err);\n                    displaySystemNotification('讀取CSV失敗', true);\n                    csvFilenameDisplay.textContent = '';\n                }\n                fileInputHidden.value = '';\n            };\n\n            overlay.querySelector('#qt-clear-all-input-btn').onclick = () => {\n                queryValuesInput.value = '';\n                csvFilenameDisplay.textContent = '';\n                csvImportState = { fileName: '', rawHeaders: [], rawData: [], selectedColForQueryName: null, selectedColsForA17Merge: [], isA17CsvPrepared: false };\n                fileInputHidden.value = '';\n                displaySystemNotification('所有輸入已清除', false);\n            };\n\n            const closeDialog = (value) => { overlay.remove(); document.removeEventListener('keydown', escListener); resolve(value); };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog(null); };\n            document.addEventListener('keydown', escListener);\n\n            overlay.querySelector('#qt-querysetup-ok').onclick = () => {\n                const values = queryValuesInput.value.trim();\n                if (!selectedQueryDefinitionGlobal) { displaySystemNotification('請選查詢欄位類型', true); return; }\n                if (!values) { displaySystemNotification(`請輸入${selectedQueryDefinitionGlobal.queryDisplayName}`, true); queryValuesInput.focus(); return; }\n                closeDialog({ selectedApiKey: selectedQueryDefinitionGlobal.queryApiKey, queryValues: values });\n            };\n            overlay.querySelector('#qt-querysetup-cancel').onclick = () => closeDialog(null);\n        });\n    }\n\n    /**\n     * 創建 CSV 檔案用途選擇對話方塊。\n     * @returns {Promise<string|null>} - 返回 'fillQueryValues', 'prepareA17Merge' 或 null。\n     */\n    function createCSVPurposeDialog() {\n        return new Promise(resolve => {\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">選擇CSV檔案用途</h3>\n                <div style=\"display:flex; flex-direction:column; gap:10px;\">\n                    <button id=\"qt-csv-purpose-query\" class=\"qt-dialog-btn qt-dialog-btn-blue\" style=\"margin-left:0;\">將CSV某欄作為查詢值</button>\n                    <button id=\"qt-csv-purpose-a17\" class=\"qt-dialog-btn qt-dialog-btn-green\" style=\"margin-left:0;\">勾選CSV欄位供A17合併顯示</button>\n                </div>\n                <div style=\"text-align:center; margin-top:15px;\">\n                    <button id=\"qt-csv-purpose-cancel\" class=\"qt-dialog-btn qt-dialog-btn-grey\">取消</button>\n                </div>`;\n            const { overlay } = createDialogBase('_CSVPurpose', contentHtml, '300px', 'auto');\n            const closeDialog = (value) => { overlay.remove(); document.removeEventListener('keydown', escListener); resolve(value); };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog(null); };\n            document.addEventListener('keydown', escListener);\n            overlay.querySelector('#qt-csv-purpose-query').onclick = () => closeDialog('fillQueryValues');\n            overlay.querySelector('#qt-csv-purpose-a17').onclick = () => closeDialog('prepareA17Merge');\n            overlay.querySelector('#qt-csv-purpose-cancel').onclick = () => closeDialog(null);\n        });\n    }\n\n    /**\n     * 創建 CSV 欄位選擇對話方塊 (單選)。\n     * @param {string[]} headers - CSV 的標頭陣列。\n     * @param {string} title - 對話方塊標題。\n     * @returns {Promise<number|null>} - 返回選中欄位的索引或 null。\n     */\n    function createCSVColumnSelectionDialog(headers, title) {\n        return new Promise(resolve => {\n            let optionsHtml = headers.map((header, index) => `<button class=\"qt-dialog-btn qt-dialog-btn-blue\" data-index=\"${index}\" style=\"margin:5px; width: calc(50% - 10px); text-overflow: ellipsis; overflow: hidden; white-space: nowrap;\">${escapeHtml(header)}</button>`).join('');\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">${escapeHtml(title)}</h3>\n                <div style=\"display:flex; flex-wrap:wrap; justify-content:center; max-height:300px; overflow-y:auto; margin-bottom:15px;\">${optionsHtml}</div>\n                <div style=\"text-align:center;\"><button id=\"qt-csvcol-cancel\" class=\"qt-dialog-btn qt-dialog-btn-grey\">取消</button></div>`;\n            const { overlay, dialog } = createDialogBase('_CSVColSelect', contentHtml, '400px', 'auto');\n            const closeDialog = (value) => { overlay.remove(); document.removeEventListener('keydown', escListener); resolve(value); };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog(null); };\n            document.addEventListener('keydown', escListener);\n            dialog.querySelectorAll('.qt-dialog-btn[data-index]').forEach(btn => { btn.onclick = () => closeDialog(parseInt(btn.dataset.index)); });\n            overlay.querySelector('#qt-csvcol-cancel').onclick = () => closeDialog(null);\n        });\n    }\n\n    /**\n     * 創建 CSV 欄位選擇對話方塊 (多選)。\n     * @param {string[]} headers - CSV 的標頭陣列。\n     * @param {string} title - 對話方塊標題。\n     * @returns {Promise<string[]|null>} - 返回選中欄位的標頭名稱陣列或 null。\n     */\n    function createCSVColumnCheckboxDialog(headers, title) {\n        return new Promise(resolve => {\n            let checkboxesHtml = headers.map((header, index) => `\n                <div style=\"margin-bottom: 8px; display:flex; align-items:center;\">\n                    <input type=\"checkbox\" id=\"qt-csv-header-cb-${index}\" value=\"${escapeHtml(header)}\" style=\"margin-right:8px; transform:scale(1.2);\">\n                    <label for=\"qt-csv-header-cb-${index}\" style=\"font-size:14px;\">${escapeHtml(header)}</label>\n                </div>`).join('');\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">${escapeHtml(title)}</h3>\n                <div style=\"max-height: 300px; overflow-y: auto; margin-bottom: 15px; border: 1px solid #eee; padding: 10px; border-radius: 4px;\">${checkboxesHtml}</div>\n                <div class=\"qt-dialog-flex-end\">\n                    <button id=\"qt-csvcb-cancel\" class=\"qt-dialog-btn qt-dialog-btn-grey\">取消</button>\n                    <button id=\"qt-csvcb-ok\" class=\"qt-dialog-btn qt-dialog-btn-blue\">確定勾選</button>\n                </div>`;\n            const { overlay, dialog } = createDialogBase('_CSVCheckbox', contentHtml, '400px', 'auto');\n            const closeDialog = (value) => { overlay.remove(); document.removeEventListener('keydown', escListener); resolve(value); };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog(null); };\n            document.addEventListener('keydown', escListener);\n            overlay.querySelector('#qt-csvcb-ok').onclick = () => {\n                const selected = [];\n                dialog.querySelectorAll('input[type=\"checkbox\"]:checked').forEach(cb => selected.push(cb.value));\n                if (selected.length === 0) { displaySystemNotification('請至少勾選一個欄位', true); return; }\n                closeDialog(selected);\n            };\n            overlay.querySelector('#qt-csvcb-cancel').onclick = () => closeDialog(null);\n        });\n    }\n\n    /**\n     * 創建 A17 通知文本設定對話方塊。\n     * @returns {Promise<boolean|null>} - 返回 true (儲存) 或 null (取消)。\n     */\n    function createA17TextSettingDialog() {\n        return new Promise(resolve => {\n            const s = a17ModeState.textSettings;\n            const contentHtml = `\n                <h3 class=\"qt-dialog-title\">A17 通知文本設定</h3>\n                <div style=\"display:grid; grid-template-columns: 1fr; gap: 15px;\">\n                    <div>\n                        <label for=\"qt-a17-mainContent\" style=\"font-weight:bold; font-size:13px; display:block; margin-bottom:5px;\">主文案內容：</label>\n                        <textarea id=\"qt-a17-mainContent\" class=\"qt-textarea\" style=\"height:150px;\">${escapeHtml(s.mainContent)}</textarea>\n                        <div style=\"display:flex; gap:10px; margin-top:5px; flex-wrap:wrap;\">\n                            <label style=\"font-size:12px;\">字體大小: <input type=\"number\" id=\"qt-a17-mainFontSize\" value=\"${s.mainFontSize}\" min=\"8\" max=\"24\" step=\"0.5\" class=\"qt-input\" style=\"width:60px; padding:3px; margin-bottom:0;\"> pt</label>\n                            <label style=\"font-size:12px;\">行高: <input type=\"number\" id=\"qt-a17-mainLineHeight\" value=\"${s.mainLineHeight}\" min=\"1\" max=\"3\" step=\"0.1\" class=\"qt-input\" style=\"width:60px; padding:3px; margin-bottom:0;\"> 倍</label>\n                            <label style=\"font-size:12px;\">顏色: <input type=\"color\" id=\"qt-a17-mainFontColor\" value=\"${s.mainFontColor}\" style=\"padding:1px; height:25px; vertical-align:middle;\"></label>\n                        </div>\n                    </div>\n                    <div>\n                        <label style=\"font-weight:bold; font-size:13px; display:block; margin-bottom:5px;\">動態日期設定 (相對於今天)：</label>\n                        <div style=\"display:flex; gap:15px; align-items:center; margin-bottom:5px;flex-wrap:wrap;\">\n                            <label style=\"font-size:12px;\">產檔時間偏移: <input type=\"number\" id=\"qt-a17-genDateOffset\" value=\"${s.genDateOffset}\" class=\"qt-input\" style=\"width:60px; padding:3px; margin-bottom:0;\"> 天</label>\n                            <label style=\"font-size:12px;\">比對時間偏移: <input type=\"number\" id=\"qt-a17-compDateOffset\" value=\"${s.compDateOffset}\" class=\"qt-input\" style=\"width:60px; padding:3px; margin-bottom:0;\"> 天</label>\n                        </div>\n                        <div style=\"display:flex; gap:10px; flex-wrap:wrap;\">\n                            <label style=\"font-size:12px;\">日期字體大小: <input type=\"number\" id=\"qt-a17-dateFontSize\" value=\"${s.dateFontSize}\" min=\"6\" max=\"16\" step=\"0.5\" class=\"qt-input\" style=\"width:60px; padding:3px; margin-bottom:0;\"> pt</label>\n                            <label style=\"font-size:12px;\">日期行高: <input type=\"number\" id=\"qt-a17-dateLineHeight\" value=\"${s.dateLineHeight}\" min=\"1\" max=\"3\" step=\"0.1\" class=\"qt-input\" style=\"width:60px; padding:3px; margin-bottom:0;\"> 倍</label>\n                            <label style=\"font-size:12px;\">日期顏色: <input type=\"color\" id=\"qt-a17-dateFontColor\" value=\"${s.dateFontColor}\" style=\"padding:1px; height:25px; vertical-align:middle;\"></label>\n                        </div>\n                    </div>\n                     <div>\n                        <label style=\"font-weight:bold; font-size:13px; display:block; margin-bottom:5px;\">預覽效果 (此區可臨時編輯，僅影響當次複製)：</label>\n                        <div id=\"qt-a17-preview\" contenteditable=\"true\" style=\"border:1px solid #ccc; padding:10px; min-height:100px; max-height:200px; overflow-y:auto; font-size:${s.mainFontSize}pt; line-height:${s.mainLineHeight}; color:${s.mainFontColor}; background:#f9f9f9; border-radius:4px;\"></div>\n                    </div>\n                </div>\n                <div class=\"qt-dialog-flex-between\" style=\"margin-top:20px;\">\n                    <button id=\"qt-a17-text-reset\" class=\"qt-dialog-btn qt-dialog-btn-orange\">重設預設</button>\n                    <div>\n                        <button id=\"qt-a17-text-cancel\" class=\"qt-dialog-btn qt-dialog-btn-grey\">取消</button>\n                        <button id=\"qt-a17-text-save\" class=\"qt-dialog-btn qt-dialog-btn-blue\">儲存設定</button>\n                    </div>\n                </div>`;\n            const { overlay, dialog } = createDialogBase('_A17TextSettings', contentHtml, '550px', 'auto');\n            const previewEl = overlay.querySelector('#qt-a17-preview');\n\n            const getSettingsFromUI = () => ({\n                mainContent: overlay.querySelector('#qt-a17-mainContent').value,\n                mainFontSize: parseFloat(overlay.querySelector('#qt-a17-mainFontSize').value),\n                mainLineHeight: parseFloat(overlay.querySelector('#qt-a17-mainLineHeight').value),\n                mainFontColor: overlay.querySelector('#qt-a17-mainFontColor').value,\n                dateFontSize: parseFloat(overlay.querySelector('#qt-a17-dateFontSize').value),\n                dateLineHeight: parseFloat(overlay.querySelector('#qt-a17-dateLineHeight').value),\n                dateFontColor: overlay.querySelector('#qt-a17-dateFontColor').value,\n                genDateOffset: parseInt(overlay.querySelector('#qt-a17-genDateOffset').value),\n                compDateOffset: parseInt(overlay.querySelector('#qt-a17-compDateOffset').value),\n            });\n\n            const updatePreview = () => {\n                const currentUISettings = getSettingsFromUI();\n                const today = new Date();\n                const genDate = new Date(today); genDate.setDate(today.getDate() + currentUISettings.genDateOffset);\n                const compDate = new Date(today); compDate.setDate(today.getDate() + currentUISettings.compDateOffset);\n                const genDateStr = formatDate(genDate);\n                const compDateStr = formatDate(compDate);\n                let previewContent = escapeHtml(currentUISettings.mainContent).replace(/\\n/g, '<br>') +\n                    `<br><br><span class=\"qt-a17-dynamic-date\" style=\"font-size:${currentUISettings.dateFontSize}pt; line-height:${currentUISettings.dateLineHeight}; color:${currentUISettings.dateFontColor};\">` +\n                    `產檔時間：${genDateStr}<br>比對時間：${compDateStr}</span>`;\n                previewEl.innerHTML = previewContent;\n                previewEl.style.fontSize = currentUISettings.mainFontSize + 'pt';\n                previewEl.style.lineHeight = currentUISettings.mainLineHeight;\n                previewEl.style.color = currentUISettings.mainFontColor;\n            };\n\n            ['#qt-a17-mainContent', '#qt-a17-mainFontSize', '#qt-a17-mainLineHeight', '#qt-a17-mainFontColor', '#qt-a17-dateFontSize', '#qt-a17-dateLineHeight', '#qt-a17-dateFontColor', '#qt-a17-genDateOffset', '#qt-a17-compDateOffset'].forEach(selector => {\n                const el = overlay.querySelector(selector);\n                if (el.type === 'color') el.onchange = updatePreview; else el.oninput = updatePreview;\n            });\n            updatePreview();\n\n            const closeDialog = (value) => { overlay.remove(); document.removeEventListener('keydown', escListener); resolve(value); };\n            const escListener = (e) => { if (e.key === 'Escape') closeDialog(null); };\n            document.addEventListener('keydown', escListener);\n\n            overlay.querySelector('#qt-a17-text-save').onclick = () => {\n                const newSettings = getSettingsFromUI();\n                if (!newSettings.mainContent.trim()) { displaySystemNotification('主文案內容不可為空', true); return; }\n                a17ModeState.textSettings = newSettings;\n                localStorage.setItem(A17_TEXT_SETTINGS_STORAGE_KEY, JSON.stringify(newSettings));\n                displaySystemNotification('A17文本設定已儲存', false);\n                closeDialog(true);\n            };\n            overlay.querySelector('#qt-a17-text-cancel').onclick = () => closeDialog(null);\n            overlay.querySelector('#qt-a17-text-reset').onclick = () => {\n                overlay.querySelector('#qt-a17-mainContent').value = A17_DEFAULT_TEXT_CONTENT;\n                overlay.querySelector('#qt-a17-mainFontSize').value = 12;\n                overlay.querySelector('#qt-a17-mainLineHeight').value = 1.5;\n                overlay.querySelector('#qt-a17-mainFontColor').value = '#333333';\n                overlay.querySelector('#qt-a17-dateFontSize').value = 8;\n                overlay.querySelector('#qt-a17-dateLineHeight').value = 1.2;\n                overlay.querySelector('#qt-a17-dateFontColor').value = '#555555';\n                overlay.querySelector('#qt-a17-genDateOffset').value = -3;\n                overlay.querySelector('#qt-a17-compDateOffset').value = 0;\n                updatePreview();\n            };\n        });\n    }\n\n\n    // =======================================================================\n    // MODULE: API 通訊 (API Communication)\n    // -----------------------------------------------------------------------\n    // 負責與後端 API 進行資料交換，包含錯誤處理與重試機制。\n    // =======================================================================\n\n    /**\n     * 執行單次 API 查詢。\n     * @param {string} queryValue - 查詢的值。\n     * @param {string} apiKey - 查詢的欄位 API Key。\n     * @returns {Promise<object>} - 返回包含查詢結果、成功狀態與錯誤訊息的物件。\n     */\n    async function performApiQuery(queryValue, apiKey) {\n        const reqBody = { currentPage: 1, pageSize: 10 };\n        reqBody[apiKey] = queryValue;\n        const fetchOpts = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(reqBody),\n        };\n        if (apiAuthToken) fetchOpts.headers['SSO-TOKEN'] = apiAuthToken;\n\n        let retries = 1;\n        while (retries >= 0) {\n            try {\n                const res = await fetch(CURRENT_API_URL, fetchOpts);\n                const data = await res.json();\n                if (res.status === 401) {\n                    apiAuthToken = null;\n                    localStorage.removeItem(TOKEN_STORAGE_KEY);\n                    return { error: 'token_invalid', data: null };\n                }\n                if (!res.ok) {\n                    throw new Error(`API請求錯誤: ${res.status} ${res.statusText}`);\n                }\n                return { error: null, data: data, success: data && data.records && data.records.length > 0 };\n            } catch (e) {\n                console.error(`查詢 ${queryValue} 錯誤 (嘗試 ${2-retries}):`, e);\n                if (retries > 0) {\n                    displaySystemNotification(`查詢 ${queryValue} 失敗，2秒後重試...`, true, 1800);\n                    await new Promise(r => setTimeout(r, 2000));\n                    retries--;\n                } else {\n                    return { error: 'network_error', data: null };\n                }\n            }\n        }\n    }\n\n\n    // =======================================================================\n    // MODULE: 主 UI 渲染 (Main UI Rendering)\n    // -----------------------------------------------------------------------\n    // 負責建立和管理主查詢結果介面，包括標題列、控制按鈕和表格容器。\n    // =======================================================================\n\n    /**\n     * 渲染主結果表格介面。\n     * @param {object[]} dataToRender - 要在表格中顯示的初始資料。\n     */\n    function renderResultsTableUI(dataToRender) {\n        currentTableInstance.mainUIElement?.remove();\n        document.removeEventListener('keydown', mainUIEscListener);\n\n        const mainUI = document.createElement('div');\n        currentTableInstance.mainUIElement = mainUI;\n        mainUI.id = TOOL_MAIN_CONTAINER_ID;\n        mainUI.style.cssText = `position:fixed;z-index:${Z_INDEX_MAIN_UI};left:50%;top:50%;transform:translate(-50%,-50%);background:#f8f9fa;border-radius:10px;box-shadow:0 8px 30px rgba(0,0,0,0.15);padding:0;width:auto;max-width:850px;max-height:90vh;display:flex;flex-direction:column;font-family:'Microsoft JhengHei',Arial,sans-serif;font-size:13px;border:1px solid #dee2e6;user-select:none;`;\n\n        const titleBar = document.createElement('div');\n        titleBar.textContent = '凱基人壽案件查詢結果';\n        titleBar.style.cssText = `padding:10px 15px;margin:-0px -0px 10px -0px;background-color:#343a40;color:white;font-weight:bold;font-size:14px;text-align:center;border-top-left-radius:9px;border-top-right-radius:9px;cursor:grab;user-select:none;`;\n        mainUI.appendChild(titleBar);\n\n        const contentWrapper = document.createElement('div');\n        contentWrapper.style.cssText = 'padding:15px; overflow-y:auto; display:flex; flex-direction:column; flex-grow:1;';\n        mainUI.appendChild(contentWrapper);\n\n        // --- 控制項 --- \n        const controlsHeader = document.createElement('div');\n        controlsHeader.style.cssText = `display:flex;align-items:center;justify-content:space-between;margin-bottom:10px;padding-bottom:10px;border-bottom:1px solid #e0e0e0;flex-wrap:wrap;gap:8px;`;\n\n        const summarySec = document.createElement('div');\n        summarySec.id = TOOL_MAIN_CONTAINER_ID + '_SummarySection';\n        summarySec.style.cssText = 'font-size:13px;font-weight:bold;color:#2c3e50;white-space:nowrap;';\n        controlsHeader.appendChild(summarySec);\n\n        const filterInput = document.createElement('input');\n        filterInput.type = 'text';\n        filterInput.id = TOOL_MAIN_CONTAINER_ID + '_TableFilterInput';\n        filterInput.placeholder = '篩選表格內容...';\n        filterInput.className = 'qt-input';\n        filterInput.style.width = '180px';\n        filterInput.style.marginBottom = '0';\n        \n        const buttonsGroupLeft = document.createElement('div');\n        buttonsGroupLeft.style.cssText = 'display:flex;gap:6px;align-items:center;';\n        const buttonsGroupRight = document.createElement('div');\n        buttonsGroupRight.style.cssText = 'display:flex;gap:6px;align-items:center;margin-left:auto;';\n\n        [\n            { id: 'ClearConditions', text: '清除條件', cls: 'qt-dialog-btn-grey', group: buttonsGroupLeft },\n            { id: 'Requery', text: '重新查詢', cls: 'qt-dialog-btn-orange', group: buttonsGroupLeft },\n            { id: 'A17', text: 'A17作業', cls: 'qt-dialog-btn-purple', group: buttonsGroupLeft }, // 假設紫色\n            { id: 'CopyTable', text: '複製表格', cls: 'qt-dialog-btn-green', group: buttonsGroupLeft },\n            { id: 'EditMode', text: '編輯模式', cls: 'qt-dialog-btn-blue', group: buttonsGroupLeft },\n            { id: 'AddRow', text: '+ 新增列', cls: 'qt-dialog-btn-blue', group: buttonsGroupLeft, style: 'display:none;' },\n        ].forEach(cfg => {\n            const btn = document.createElement('button');\n            btn.id = TOOL_MAIN_CONTAINER_ID + '_btn' + cfg.id;\n            btn.textContent = cfg.text;\n            btn.className = `qt-dialog-btn ${cfg.cls}`;\n            if (cfg.cls === 'qt-dialog-btn-purple') btn.style.backgroundColor = '#6f42c1';\n            if (cfg.style) btn.style.cssText += cfg.style;\n            cfg.group.appendChild(btn);\n        });\n\n        const closeBtn = document.createElement('button');\n        closeBtn.id = TOOL_MAIN_CONTAINER_ID + '_btnCloseTool';\n        closeBtn.textContent = '關閉工具';\n        closeBtn.className = 'qt-dialog-btn qt-dialog-btn-red';\n        buttonsGroupRight.appendChild(closeBtn);\n\n        controlsHeader.appendChild(filterInput);\n        controlsHeader.appendChild(buttonsGroupLeft);\n        controlsHeader.appendChild(buttonsGroupRight);\n        contentWrapper.appendChild(controlsHeader);\n\n        // --- A17 專用 UI --- \n        const a17UnitBtnsCtr = document.createElement('div');\n        a17UnitBtnsCtr.id = TOOL_MAIN_CONTAINER_ID + '_A17UnitBtns';\n        a17UnitBtnsCtr.style.cssText = 'margin-bottom:10px;display:none;flex-wrap:wrap;gap:6px;justify-content:flex-start;';\n        contentWrapper.appendChild(a17UnitBtnsCtr);\n        currentTableInstance.a17UnitButtonsContainer = a17UnitBtnsCtr;\n\n        const a17TextControls = document.createElement('div');\n        a17TextControls.id = TOOL_MAIN_CONTAINER_ID + '_A17TextControls';\n        a17TextControls.style.cssText = 'margin-bottom:10px;display:none;align-items:center;gap:10px;';\n        a17TextControls.innerHTML = `\n            <label style=\"font-size:12px;color:#333;display:flex;align-items:center;cursor:pointer;\">\n                <input type=\"checkbox\" id=\"${TOOL_MAIN_CONTAINER_ID}_cbA17IncludeText\" checked style=\"margin-right:4px;\">A17含通知文\n            </label>\n            <button id=\"${TOOL_MAIN_CONTAINER_ID}_btnA17EditText\" class=\"qt-dialog-btn qt-dialog-btn-blue\" style=\"margin-left:0;padding:5px 10px;font-size:12px;\">編輯通知文</button>`;\n        contentWrapper.appendChild(a17TextControls);\n\n        // --- 表格本體 --- \n        const tableScrollWrap = document.createElement('div');\n        tableScrollWrap.id = TOOL_MAIN_CONTAINER_ID + '_TableScrollWrapper';\n        tableScrollWrap.style.cssText = 'flex-grow:1;overflow:auto;border:1px solid #ccc;border-radius:5px;background:white;';\n        const tableEl = document.createElement('table');\n        tableEl.id = TOOL_MAIN_CONTAINER_ID + '_ResultsTable';\n        tableEl.style.cssText = 'width:100%;border-collapse:collapse;font-size:12px;';\n        tableScrollWrap.appendChild(tableEl);\n        contentWrapper.appendChild(tableScrollWrap);\n\n        const tHREl = document.createElement('thead');\n        tHREl.style.cssText = 'position:sticky;top:0;z-index:1;background-color:#343a40;color:white;';\n        tableEl.appendChild(tHREl);\n        currentTableInstance.tableHeadElement = tHREl;\n\n        const tBREl = document.createElement('tbody');\n        tableEl.appendChild(tBREl);\n        currentTableInstance.tableBodyElement = tBREl;\n\n        document.body.appendChild(mainUI);\n\n        // --- 事件綁定 --- \n        titleBar.onmousedown = (e) => {\n            if (e.target !== titleBar) return;\n            e.preventDefault();\n            dragState = { dragging: true, startX: e.clientX, startY: e.clientY, initialX: mainUI.offsetLeft, initialY: mainUI.offsetTop };\n            titleBar.style.cursor = 'grabbing';\n            mainUI.style.transform = 'none'; // 取消 transform 以便用 left/top 定位\n        };\n        document.onmousemove = (e) => {\n            if (dragState.dragging) {\n                const dx = e.clientX - dragState.startX;\n                const dy = e.clientY - dragState.startY;\n                mainUI.style.left = (dragState.initialX + dx) + 'px';\n                mainUI.style.top = (dragState.initialY + dy) + 'px';\n            }\n        };\n        document.onmouseup = () => {\n            if (dragState.dragging) {\n                dragState.dragging = false;\n                titleBar.style.cursor = 'grab';\n            }\n        };\n\n        filterInput.oninput = () => applyTableFilter();\n        mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnClearConditions`).onclick = handleClearConditions;\n        mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnRequery`).onclick = () => {\n            mainUI.remove();\n            document.removeEventListener('keydown', mainUIEscListener);\n            executeCaseQueryTool();\n        };\n        const a17Btn = mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnA17`);\n        a17Btn.onmousedown = (e) => { \n            if (e.button !== 0) return; // 只回應左鍵\n            a17ButtonLongPressTimer = setTimeout(() => { \n                a17ButtonLongPressTimer = null;\n                toggleA17Mode(true); // 長按強制進入\n            }, 700);\n        };\n        a17Btn.onmouseup = () => {\n            if (a17ButtonLongPressTimer) {\n                clearTimeout(a17ButtonLongPressTimer);\n                a17ButtonLongPressTimer = null;\n                toggleA17Mode(false); // 短按正常切換\n            }\n        };\n        a17Btn.onmouseleave = () => { // 滑鼠移開按鈕時也取消計時\n             if (a17ButtonLongPressTimer) {\n                clearTimeout(a17ButtonLongPressTimer);\n                a17ButtonLongPressTimer = null;\n            }\n        }\n\n        mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnCopyTable`).onclick = handleCopyTable;\n        mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnEditMode`).onclick = toggleEditMode;\n        mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnAddRow`).onclick = handleAddRowToTable;\n        closeBtn.onclick = () => { mainUI.remove(); document.removeEventListener('keydown', mainUIEscListener); };\n        mainUI.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnA17EditText`).onclick = async () => {\n            await createA17TextSettingDialog();\n        };\n        document.addEventListener('keydown', mainUIEscListener);\n\n        // --- 初始渲染 --- \n        updateSummaryCount(dataToRender.length);\n        if (currentTableInstance.isA17Mode) {\n            renderA17ModeUI();\n            populateTableRows(baseA17MasterData);\n            updateA17UnitButtonCounts();\n        } else {\n            renderNormalModeUI();\n            populateTableRows(dataToRender);\n        }\n    }\n\n    /**\n     * 主介面的 Escape 鍵監聽，用於關閉視窗。\n     * @param {KeyboardEvent} e - 鍵盤事件。\n     */\n    const mainUIEscListener = (e) => {\n        // 確保沒有任何對話方塊是開啟的\n        if (e.key === 'Escape' && currentTableInstance.mainUIElement && !document.querySelector(`[id^=\"${TOOL_MAIN_CONTAINER_ID}_\"][id$=\"_overlay\"]`)) {\n            currentTableInstance.mainUIElement.remove();\n            document.removeEventListener('keydown', mainUIEscListener);\n        }\n    };\n\n    /**\n     * 更新摘要區域的計數。\n     * @param {number} visibleRowCount - 目前表格中可見的行數。\n     */\n    function updateSummaryCount(visibleRowCount) {\n        const summaryEl = currentTableInstance.mainUIElement?.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_SummarySection`);\n        if (!summaryEl) return;\n        let baseDataCount = currentTableInstance.isA17Mode ? baseA17MasterData.length : originalQueryResults.length;\n        let text = `查詢結果：<strong>${baseDataCount}</strong>筆`;\n        const filterInput = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_TableFilterInput`);\n        const isFiltered = (filterInput && filterInput.value.trim() !== '') || (currentTableInstance.isA17Mode && a17ModeState.selectedUnits.size > 0);\n        if (isFiltered && visibleRowCount !== baseDataCount) {\n            text += ` (篩選後顯示 <strong>${visibleRowCount}</strong> 筆)`;\n        }\n        summaryEl.innerHTML = text;\n    }\n\n\n    // =======================================================================\n    // MODULE: 表格互動與邏輯 (Table Interaction & Logic)\n    // -----------------------------------------------------------------------\n    // 處理表格的各種操作，如渲染、排序、篩選、編輯、複製等。\n    // =======================================================================\n\n    /**\n     * 渲染表格標頭。\n     * @param {string[]} headers - 標頭文字陣列。\n     */\n    function renderTableHeaders(headers) {\n        currentTableInstance.tableHeadElement.innerHTML = '';\n        const hr = document.createElement('tr');\n        headers.forEach((hTxt, idx) => {\n            const th = document.createElement('th');\n            th.textContent = escapeHtml(hTxt);\n            th.style.cssText = `padding: 8px 6px; text-align:center; white-space:nowrap; cursor:pointer; user-select:none; font-weight:600; font-size:12px; border-right: 1px solid #4a6075;`;\n            if (idx === headers.length - 1) th.style.borderRight = 'none';\n            if (idx === 0 && !currentTableInstance.isA17Mode) th.style.backgroundColor = '#007bff'; // 突顯查詢值欄位\n            th.onclick = () => sortTableByColumn(hTxt);\n            hr.appendChild(th);\n        });\n\n        if (isEditMode) {\n            const thAction = document.createElement('th');\n            thAction.textContent = \"操作\";\n            thAction.style.cssText = `padding: 8px 6px; text-align:center; white-space:nowrap; font-weight:600; font-size:12px;`;\n            hr.appendChild(thAction);\n        }\n\n        currentTableInstance.tableHeadElement.appendChild(hr);\n        currentTableInstance.currentHeaders = headers;\n    }\n\n    /**\n     * 填充表格的資料行。\n     * @param {object[]} data - 要填充的資料陣列。\n     */\n    function populateTableRows(data) {\n        currentTableInstance.tableBodyElement.innerHTML = '';\n        data.forEach((row, rowIndex) => {\n            const tr = document.createElement('tr');\n            tr.style.backgroundColor = rowIndex % 2 ? '#f8f9fa' : '#ffffff';\n            tr.onmouseover = () => { if(!tr.classList.contains('qt-editing-row')) tr.style.backgroundColor = '#e9ecef' };\n            tr.onmouseout = () => { if(!tr.classList.contains('qt-editing-row')) tr.style.backgroundColor = rowIndex % 2 ? '#f8f9fa' : '#ffffff' };\n\n            currentTableInstance.currentHeaders.forEach((headerKey, colIndex) => {\n                const td = document.createElement('td');\n                td.style.cssText = 'padding:6px; border-bottom:1px solid #dee2e6; font-size:12px; text-align:center; border-right:1px solid #dee2e6;';\n                if (colIndex === currentTableInstance.currentHeaders.length - 1) td.style.borderRight = 'none';\n\n                let cellValue = row[headerKey] === null || row[headerKey] === undefined ? '' : String(row[headerKey]);\n                \n                if (headerKey === FIELD_DISPLAY_NAMES_MAP.statusCombined && typeof cellValue === 'string' && cellValue.includes('<span')) {\n                    td.innerHTML = cellValue; // 直接渲染 HTML\n                } else {\n                    td.textContent = cellValue;\n                }\n\n                if (currentTableInstance.isA17Mode && headerKey === FIELD_DISPLAY_NAMES_MAP.uwApproverUnit) {\n                    td.style.backgroundColor = '#e6f7ff'; // 突顯分公司欄位\n                    td.style.fontWeight = '500';\n                }\n                \n                // 編輯模式下的點擊行為\n                if (isEditMode && ((colIndex > 1 && !row._isNewRow) || (row._isNewRow && headerKey !== \"操作\")) && headerKey !== FIELD_DISPLAY_NAMES_MAP._apiQueryStatus) {\n                    td.onclick = (e) => {\n                        if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'SELECT') {\n                            startCellEdit(td, row, headerKey, rowIndex);\n                        }\n                    };\n                } else if (!isEditMode) { // 非編輯模式下的點擊行為 (複製)\n                    td.onclick = () => {\n                        navigator.clipboard.writeText(td.textContent || td.innerText)\n                            .then(() => displaySystemNotification(`已複製: ${td.textContent || td.innerText}`, false, 1000))\n                            .catch(err => displaySystemNotification('複製失敗', true));\n                    };\n                }\n\n                tr.appendChild(td);\n            });\n\n            if (isEditMode) {\n                 const tdAction = document.createElement('td');\n                 tdAction.style.cssText = 'padding:6px; border-bottom:1px solid #dee2e6; text-align:center;';\n                 const deleteBtn = document.createElement('button');\n                 deleteBtn.innerHTML = '&#x1F5D1;'; // 垃圾桶圖示\n                 deleteBtn.className = 'qt-dialog-btn qt-dialog-btn-red';\n                 deleteBtn.style.padding = '3px 6px';\n                 deleteBtn.style.fontSize = '10px';\n                 deleteBtn.onclick = () => handleDeleteRow(rowIndex);\n                 tdAction.appendChild(deleteBtn);\n                 tr.appendChild(tdAction);\n            }\n\n            currentTableInstance.tableBodyElement.appendChild(tr);\n        });\n        updateSummaryCount(data.length);\n    }\n\n    /**\n     * 根據指定欄位對表格進行排序。\n     * @param {string} headerKeyToSortBy - 要排序的欄位標頭。\n     */\n    function sortTableByColumn(headerKeyToSortBy) {\n        const currentData = currentTableInstance.isA17Mode ? [...baseA17MasterData] : [...originalQueryResults];\n        if (currentData.length === 0) return;\n\n        const direction = (currentTableInstance.sortDirections[headerKeyToSortBy] || 'desc') === 'asc' ? 'desc' : 'asc';\n        currentTableInstance.sortDirections = {}; // 一次只對一個欄位排序\n        currentTableInstance.sortDirections[headerKeyToSortBy] = direction;\n\n        currentData.sort((a, b) => {\n            let valA = a[headerKeyToSortBy] === null || a[headerKeyToSortBy] === undefined ? '' : String(a[headerKeyToSortBy]);\n            let valB = b[headerKeyToSortBy] === null || b[headerKeyToSortBy] === undefined ? '' : String(b[headerKeyToSortBy]);\n            const isNumeric = headerKeyToSortBy === FIELD_DISPLAY_NAMES_MAP.NO || (!isNaN(parseFloat(valA)) && isFinite(valA) && !isNaN(parseFloat(valB)) && isFinite(valB) && valA.trim() !== '' && valB.trim() !== '');\n            \n            let comparison = 0;\n            if (isNumeric) {\n                comparison = parseFloat(valA) - parseFloat(valB);\n            } else {\n                comparison = valA.localeCompare(valB, 'zh-Hant-TW');\n            }\n            return direction === 'asc' ? comparison : -comparison;\n        });\n\n        if (currentTableInstance.isA17Mode) { baseA17MasterData = currentData; } else { originalQueryResults = currentData; }\n\n        populateTableRows(currentData);\n        displaySystemNotification(`已按「${headerKeyToSortBy}」${direction === 'asc' ? '升序' : '降序'}排列`, false);\n        \n        // 更新表頭排序指示符號\n        currentTableInstance.tableHeadElement.querySelectorAll('th').forEach(th => {\n            const currentHeaderText = th.textContent.replace(/[\\u25B2\\u25BC\\s]*$/, '').trim();\n            th.innerHTML = escapeHtml(currentHeaderText);\n            if (currentHeaderText === headerKeyToSortBy) {\n                 th.innerHTML += (direction === 'asc' ? ' <span style=\"font-size:10px;\">\\u25B2</span>' : ' <span style=\"font-size:10px;\">\\u25BC</span>');\n            }\n        });\n    }\n\n    /**\n     * 根據輸入框內容和 A17 單位篩選按鈕，篩選表格資料。\n     */\n    function applyTableFilter() {\n        const filterText = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_TableFilterInput`).value.trim().toLowerCase();\n        const baseData = currentTableInstance.isA17Mode ? baseA17MasterData : originalQueryResults;\n        let filteredData = baseData;\n\n        // 文字篩選\n        if (filterText) {\n            filteredData = baseData.filter(row => \n                currentTableInstance.currentHeaders.some(headerKey => (String(row[headerKey] || '').toLowerCase().includes(filterText)))\n            );\n        }\n\n        // A17 單位篩選\n        if (currentTableInstance.isA17Mode && a17ModeState.selectedUnits.size > 0) {\n            let unitFilteredData = [];\n            a17ModeState.selectedUnits.forEach(unitId => {\n                 unitFilteredData = unitFilteredData.concat(filteredData.filter(row => {\n                    const unitVal = String(row[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n                    if (unitId === 'UNDEF') {\n                        const knownPrefixes = A17_UNIT_BUTTONS_DEFS.filter(b => b.id !== 'UNDEF').map(b => b.id.toUpperCase());\n                        return unitVal.trim() === '' || !knownPrefixes.some(prefix => unitVal.toUpperCase().startsWith(prefix));\n                    } \n                    return unitVal.toUpperCase().startsWith(unitId.toUpperCase());\n                 }));\n            });\n            filteredData = Array.from(new Set(unitFilteredData.map(JSON.stringify))).map(JSON.parse); // 去重\n        }\n\n        populateTableRows(filteredData);\n    }\n\n    /**\n     * 處理「清除條件」按鈕點擊事件。\n     */\n    function handleClearConditions() {\n        currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_TableFilterInput`).value = '';\n        currentTableInstance.sortDirections = {};\n\n        if (currentTableInstance.isA17Mode) {\n            a17ModeState.selectedUnits.clear();\n            currentTableInstance.a17UnitButtonsContainer.querySelectorAll('button.highlighted').forEach(btn => {\n                btn.classList.remove('highlighted');\n                btn.style.boxShadow = 'none';\n            });\n            csvImportState = { fileName: '', rawHeaders: [], rawData: [], selectedColForQueryName: null, selectedColsForA17Merge: [], isA17CsvPrepared: false };\n            baseA17MasterData = [...originalQueryResults];\n            baseA17MasterData.sort((a,b) => (parseInt(a[FIELD_DISPLAY_NAMES_MAP.NO]) || 0) - (parseInt(b[FIELD_DISPLAY_NAMES_MAP.NO]) || 0)); // 恢復序號排序\n            populateTableRows(baseA17MasterData);\n            updateA17UnitButtonCounts();\n        } else {\n            originalQueryResults.sort((a,b) => (parseInt(a[FIELD_DISPLAY_NAMES_MAP.NO]) || 0) - (parseInt(b[FIELD_DISPLAY_NAMES_MAP.NO]) || 0)); // 恢復序號排序\n            populateTableRows(originalQueryResults);\n        }\n\n        renderTableHeaders(currentTableInstance.currentHeaders);\n        displaySystemNotification('所有條件已清除，表格已重置為按序號排序', false);\n    }\n\n    /**\n     * 切換編輯模式。\n     */\n    function toggleEditMode() {\n        isEditMode = !isEditMode;\n        const editBtn = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnEditMode`);\n        const addRowBtn = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_btnAddRow`);\n        editBtn.textContent = isEditMode ? '完成編輯' : '編輯模式';\n        editBtn.className = `qt-dialog-btn ${isEditMode ? 'qt-dialog-btn-red' : 'qt-dialog-btn-blue'}`;\n        addRowBtn.style.display = isEditMode ? 'inline-block' : 'none';\n        \n        const currentData = currentTableInstance.isA17Mode ? baseA17MasterData : originalQueryResults;\n        renderTableHeaders(currentTableInstance.currentHeaders);\n        populateTableRows(currentData);\n        displaySystemNotification(isEditMode ? '已進入編輯模式' : '已退出編輯模式', false);\n    }\n\n    /**\n     * 啟動指定儲存格的編輯模式。\n     * @param {HTMLElement} td - 目標儲存格元素。\n     * @param {object} rowData - 該行對應的資料物件。\n     * @param {string} headerKey - 該儲存格對應的標頭。\n     * @param {number} rowIndex - 該行的索引。\n     */\n    function startCellEdit(td, rowData, headerKey, rowIndex) {\n        if (td.querySelector('input, select')) return; // 防止重複觸發\n        td.classList.add('qt-editing-cell');\n        const originalText = td.textContent;\n        td.innerHTML = '';\n\n        let inputElement;\n        // 如果是A17模式下的分公司欄位，使用下拉選單\n        if (isEditMode && currentTableInstance.isA17Mode && headerKey === FIELD_DISPLAY_NAMES_MAP.uwApproverUnit) {\n            inputElement = document.createElement('select');\n            inputElement.className = 'qt-input';\n            inputElement.style.cssText = 'width:100%;padding:4px;font-size:12px;border:1px solid #007bff;margin:0;background:transparent;';\n            const defaultOption = document.createElement('option');\n            defaultOption.value=\"\";\n            defaultOption.textContent=\"--選擇分公司--\";\n            inputElement.appendChild(defaultOption);\n            A17_UNIT_BUTTONS_DEFS.forEach(unitDef => {\n                if (unitDef.id === 'UNDEF') return;\n                const option = document.createElement('option');\n                option.value = unitDef.id;\n                option.textContent = unitDef.label;\n                const currentUnitPrefix = String(rowData[headerKey] || '').split('-')[0].toUpperCase();\n                if (unitDef.id === currentUnitPrefix) option.selected = true;\n                inputElement.appendChild(option);\n            });\n            inputElement.onchange = () => finishCellEdit(td, inputElement, rowData, headerKey, originalText, rowIndex, 'select');\n        } else { // 其他情況使用文字輸入框\n            inputElement = document.createElement('input');\n            inputElement.type = 'text';\n            inputElement.className = 'qt-input';\n            inputElement.style.cssText = 'width:100%;padding:4px;font-size:12px;border:1px solid #007bff;margin:0;';\n            inputElement.value = originalText;\n            inputElement.onkeydown = (e) => {\n                if (e.key === 'Enter') {\n                    e.preventDefault();\n                    finishCellEdit(td, inputElement, rowData, headerKey, originalText, rowIndex, 'input');\n                } else if (e.key === 'Escape') {\n                    td.textContent = originalText;\n                    td.classList.remove('qt-editing-cell');\n                }\n            };\n        }\n        \n        inputElement.onblur = () => {\n             setTimeout(() => { // 延遲以確保其他事件先觸發\n                if(td.contains(inputElement)) finishCellEdit(td, inputElement, rowData, headerKey, originalText, rowIndex, inputElement.tagName.toLowerCase());\n            }, 100);\n        };\n        \n        td.appendChild(inputElement);\n        inputElement.focus();\n        if (inputElement.select) inputElement.select();\n    }\n\n    /**\n     * 完成儲存格編輯，更新資料並還原儲存格顯示。\n     * @param {HTMLElement} td - 目標儲存格。\n     * @param {HTMLElement} inputElement - 編輯用的輸入元素。\n     * @param {object} rowData - 該行資料。\n     * @param {string} headerKey - 標頭。\n     * @param {string} originalText - 原始文字。\n     * @param {number} rowIndex - 行索引。\n     * @param {string} inputType - 輸入元件類型 ('input' 或 'select').\n     */\n    function finishCellEdit(td, inputElement, rowData, headerKey, originalText, rowIndex, inputType = 'input') {\n        const newValue = inputElement.value.trim();\n        td.classList.remove('qt-editing-cell');\n        const displayValue = (inputType === 'select' && newValue) ? (A17_UNIT_BUTTONS_DEFS.find(def => def.id === newValue)?.label || newValue) : newValue;\n        td.textContent = displayValue;\n\n        if (newValue !== originalText || (inputType === 'select' && (rowData[headerKey] || '').split('-')[0] !== newValue)) {\n            rowData[headerKey] = displayValue;\n            displaySystemNotification(`「${headerKey}」已更新`, false, 1500);\n            td.style.backgroundColor = '#d4edda';\n            if (currentTableInstance.isA17Mode && headerKey === FIELD_DISPLAY_NAMES_MAP.uwApproverUnit) {\n                updateA17UnitButtonCounts();\n                if (a17ModeState.selectedUnits.size > 0) applyTableFilter();\n            }\n        } else {\n            td.textContent = originalText;\n        }\n    }\n    \n    /**\n     * 在表格中新增一個空行以供編輯。\n     */\n    function handleAddRowToTable() {\n        if (!isEditMode) { displaySystemNotification('請先進入編輯模式', true); return; }\n        const newRow = { _isNewRow: true };\n        let maxNo = 0;\n        const targetDataset = currentTableInstance.isA17Mode ? baseA17MasterData : originalQueryResults;\n        targetDataset.forEach(row => {\n            const currentNo = parseInt(row[FIELD_DISPLAY_NAMES_MAP.NO]);\n            if (!isNaN(currentNo) && currentNo > maxNo) maxNo = currentNo;\n        });\n        newRow[FIELD_DISPLAY_NAMES_MAP.NO] = String(maxNo + 1);\n\n        currentTableInstance.currentHeaders.forEach(header => {\n            if (header !== FIELD_DISPLAY_NAMES_MAP.NO && header !== \"操作\") newRow[header] = '';\n        });\n\n        if (currentTableInstance.isA17Mode) {\n            baseA17MasterData.push(newRow);\n            populateTableRows(baseA17MasterData);\n        } else {\n            originalQueryResults.push(newRow);\n            populateTableRows(originalQueryResults);\n        }\n        displaySystemNotification('已新增一列，請編輯內容', false);\n        const tableWrapper = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_TableScrollWrapper`);\n        if(tableWrapper) tableWrapper.scrollTop = tableWrapper.scrollHeight; // 滾動到最下方\n    }\n\n    /**\n     * 刪除指定索引的資料行。\n     * @param {number} rowIndex - 要刪除的行的索引。\n     */\n    function handleDeleteRow(rowIndex) {\n        if (!isEditMode) return;\n        const targetDataset = currentTableInstance.isA17Mode ? baseA17MasterData : originalQueryResults;\n        if (rowIndex >= 0 && rowIndex < targetDataset.length) {\n            targetDataset.splice(rowIndex, 1);\n            populateTableRows(targetDataset);\n            displaySystemNotification('已刪除該列資料', false);\n            if(currentTableInstance.isA17Mode) updateA17UnitButtonCounts();\n        }\n    }\n\n    /**\n     * 處理「複製表格」按鈕的點擊事件。\n     */\n    function handleCopyTable() {\n        const dataToCopy = [];\n        const rows = currentTableInstance.tableBodyElement.querySelectorAll('tr');\n        rows.forEach(tr => {\n            const rowData = {};\n            tr.querySelectorAll('td').forEach((td, colIndex) => {\n                // 忽略編輯模式下的操作欄\n                if (isEditMode && colIndex === currentTableInstance.currentHeaders.length) return;\n                const headerKey = currentTableInstance.currentHeaders[colIndex];\n                rowData[headerKey] = td.textContent || td.innerText;\n            });\n            if (Object.keys(rowData).length > 0) dataToCopy.push(rowData);\n        });\n\n        if (dataToCopy.length === 0) { displaySystemNotification('沒有資料可複製', true); return; }\n\n        if (currentTableInstance.isA17Mode) {\n            const includeText = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_cbA17IncludeText`).checked;\n            const previewDialog = document.getElementById(TOOL_MAIN_CONTAINER_ID + '_A17TextSettings_overlay');\n            let customContentFromPreview = null;\n            // 如果預覽編輯框是開啟的，就用預覽框內的內容\n            if (previewDialog && previewDialog.style.display === 'flex'){\n                const previewEl = previewDialog.querySelector('#qt-a17-preview');\n                if (previewEl) customContentFromPreview = previewEl.innerHTML;\n            }\n            generateAndCopyA17NotificationHTML(dataToCopy, currentTableInstance.currentHeaders, includeText, customContentFromPreview);\n        } else {\n            let tsvContent = currentTableInstance.currentHeaders.join('\\t') + '\\n';\n            dataToCopy.forEach(row => {\n                const rowValues = currentTableInstance.currentHeaders.map(header => String(row[header] || '').replace(/\\t/g, ' ').replace(/\\n/g, ' '));\n                tsvContent += rowValues.join('\\t') + '\\n';\n            });\n            navigator.clipboard.writeText(tsvContent)\n                .then(() => displaySystemNotification(`已複製 ${dataToCopy.length} 筆資料 (TSV格式)`, false))\n                .catch(err => { console.error('TSV複製失敗:', err); displaySystemNotification('複製TSV失敗', true); });\n        }\n    }\n\n\n    // =======================================================================\n    // MODULE: A17 模式邏輯 (A17 Mode Logic)\n    // -----------------------------------------------------------------------\n    // 包含所有與 A17 報表作業模式相關的功能，如模式切換、UI 更新、資料合併等。\n    // =======================================================================\n\n    /**\n     * 從 localStorage 載入 A17 文本設定。\n     */\n    function loadA17TextSettings() {\n        const saved = localStorage.getItem(A17_TEXT_SETTINGS_STORAGE_KEY);\n        if (saved) {\n            try {\n                const parsed = JSON.parse(saved);\n                for (const key in a17ModeState.textSettings) {\n                    if (parsed.hasOwnProperty(key)) a17ModeState.textSettings[key] = parsed[key];\n                }\n            } catch (e) {\n                console.error(\"載入A17文本設定失敗:\", e);\n            }\n        }\n    }\n    \n    /**\n     * 切換 A17 作業模式。\n     * @param {boolean} forceEnter - 是否強制進入A17模式，即使沒有匯入CSV。\n     */\n    function toggleA17Mode(forceEnter = false) {\n        const a17TextControls = currentTableInstance.mainUIElement.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_A17TextControls`);\n        if (currentTableInstance.isA17Mode) {\n            // --- 退出 A17 模式 ---\n            currentTableInstance.isA17Mode = false;\n            a17ModeState.isActive = false;\n            a17ModeState.selectedUnits.clear();\n            currentTableInstance.a17UnitButtonsContainer.style.display = 'none';\n            a17TextControls.style.display = 'none';\n            renderNormalModeUI();\n            populateTableRows(originalQueryResults);\n            displaySystemNotification('已退出A17作業模式', false);\n        } else {\n            // --- 進入 A17 模式 ---\n            if (!forceEnter && !csvImportState.isA17CsvPrepared) {\n                 displaySystemNotification('請先透過「匯入CSV/TXT」按鈕選擇「勾選CSV欄位供A17合併」並完成設定。或長按「A17作業」按鈕強制進入。', true, 6000);\n                return;\n            }\n            currentTableInstance.isA17Mode = true;\n            a17ModeState.isActive = true;\n            currentTableInstance.a17UnitButtonsContainer.style.display = 'flex';\n            a17TextControls.style.display = 'flex';\n            \n            // 根據是否匯入CSV準備 A17 主資料\n            if (forceEnter && !csvImportState.isA17CsvPrepared) {\n                // 強制進入，直接使用 API 查詢結果\n                baseA17MasterData = originalQueryResults.map(row => {\n                    const newRow = {};\n                    newRow[FIELD_DISPLAY_NAMES_MAP._queriedValue_] = row[FIELD_DISPLAY_NAMES_MAP._queriedValue_];\n                    newRow[FIELD_DISPLAY_NAMES_MAP.NO] = row[FIELD_DISPLAY_NAMES_MAP.NO];\n                    ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n                        const displayName = FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey;\n                        if (row.hasOwnProperty(displayName)) newRow[displayName] = row[displayName];\n                    });\n                    newRow[FIELD_DISPLAY_NAMES_MAP._apiQueryStatus] = row[FIELD_DISPLAY_NAMES_MAP._apiQueryStatus];\n                    return newRow;\n                });\n            } else {\n                // 正常進入，合併 CSV 和 API 資料\n                baseA17MasterData = [];\n                const keyCsvHeader = csvImportState.rawHeaders.find(h => h.includes('送金單'));\n                const keyCsvIndex = keyCsvHeader ? csvImportState.rawHeaders.indexOf(keyCsvHeader) : (csvImportState.rawHeaders.length > 0 ? 0 : -1);\n\n                csvImportState.rawData.forEach((csvRowData, index) => {\n                    let mergedRow = {};\n                    mergedRow[FIELD_DISPLAY_NAMES_MAP.NO] = String(index + 1);\n\n                    // 1. 填入選擇的 CSV 欄位\n                    csvImportState.selectedColsForA17Merge.forEach(selectedCsvHeader => {\n                        const originalCsvIndex = csvImportState.rawHeaders.indexOf(selectedCsvHeader);\n                        if(originalCsvIndex !== -1) mergedRow[selectedCsvHeader] = csvRowData[originalCsvIndex];\n                    });\n\n                    // 2. 根據 key 尋找並合併 API 資料\n                    const csvKeyValue = (keyCsvIndex !== -1) ? csvRowData[keyCsvIndex] : null;\n                    let apiFound = false;\n                    if (csvKeyValue) {\n                        const matchingApiRow = originalQueryResults.find(apiRow => \n                            (apiRow[FIELD_DISPLAY_NAMES_MAP.receiptNumber] === csvKeyValue || apiRow[FIELD_DISPLAY_NAMES_MAP._queriedValue_] === csvKeyValue)\n                        );\n                        if (matchingApiRow) {\n                            apiFound = true;\n                            ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n                                const displayName = FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey;\n                                if (!mergedRow.hasOwnProperty(displayName) && matchingApiRow.hasOwnProperty(displayName)) {\n                                    mergedRow[displayName] = matchingApiRow[displayName];\n                                }\n                            });\n                            mergedRow[FIELD_DISPLAY_NAMES_MAP._apiQueryStatus] = matchingApiRow[FIELD_DISPLAY_NAMES_MAP._apiQueryStatus] || '✔️ 成功';\n                        }\n                    }\n                    \n                    // 3. 如果 API 找不到，填入預設值\n                    if (!apiFound) {\n                        ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n                            const displayName = FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey;\n                            if (!mergedRow.hasOwnProperty(displayName)) mergedRow[displayName] = '-';\n                        });\n                        mergedRow[FIELD_DISPLAY_NAMES_MAP._apiQueryStatus] = '➖ 無對應API資料';\n                    }\n                    baseA17MasterData.push(mergedRow);\n                });\n            }\n            \n            renderA17ModeUI();\n            populateTableRows(baseA17MasterData);\n            createA17UnitButtons();\n            updateA17UnitButtonCounts();\n            displaySystemNotification('已進入A17作業模式', false);\n        }\n    }\n\n    /**\n     * 渲染一般查詢模式的表格標頭。\n     */\n    function renderNormalModeUI() {\n        let headers = [FIELD_DISPLAY_NAMES_MAP._queriedValue_, FIELD_DISPLAY_NAMES_MAP.NO];\n        ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n            headers.push(FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey);\n        });\n        headers.push(FIELD_DISPLAY_NAMES_MAP._apiQueryStatus);\n        renderTableHeaders(headers);\n    }\n\n    /**\n     * 渲染 A17 模式的表格標頭。\n     */\n    function renderA17ModeUI() {\n        let headers = [];\n        if (csvImportState.isA17CsvPrepared && csvImportState.selectedColsForA17Merge.length > 0) {\n            csvImportState.selectedColsForA17Merge.forEach(csvHeader => { if(!headers.includes(csvHeader)) headers.push(csvHeader); });\n            ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n                const displayName = FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey;\n                if (!headers.includes(displayName)) headers.push(displayName);\n            });\n        } else {\n            headers.push(FIELD_DISPLAY_NAMES_MAP._queriedValue_);\n            headers.push(FIELD_DISPLAY_NAMES_MAP.NO);\n            ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n                headers.push(FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey);\n            });\n        }\n        if(!headers.includes(FIELD_DISPLAY_NAMES_MAP._apiQueryStatus)) headers.push(FIELD_DISPLAY_NAMES_MAP._apiQueryStatus);\n        renderTableHeaders(headers);\n    }\n\n    /**\n     * 創建 A17 單位篩選按鈕。\n     */\n    function createA17UnitButtons() {\n        currentTableInstance.a17UnitButtonsContainer.innerHTML = '';\n        A17_UNIT_BUTTONS_DEFS.forEach(unitDef => {\n            const btn = document.createElement('button');\n            btn.dataset.unitId = unitDef.id;\n            btn.textContent = `${unitDef.label} (0)`;\n            btn.style.cssText = `background-color:${unitDef.color};color:white;border:none;padding:6px 8px;border-radius:4px;cursor:pointer;font-size:11px;transition:all 0.2s ease;flex-grow:1;min-width:80px;text-align:center;`;\n            btn.onclick = () => {\n                if(btn.classList.contains('disabled')) return;\n                const unitId = btn.dataset.unitId;\n                if (a17ModeState.selectedUnits.has(unitId)) {\n                    a17ModeState.selectedUnits.delete(unitId);\n                    btn.classList.remove('highlighted');\n                    btn.style.boxShadow = 'none';\n                } else {\n                    a17ModeState.selectedUnits.add(unitId);\n                    btn.classList.add('highlighted');\n                    btn.style.boxShadow = `0 0 0 2px white, 0 0 0 4px ${btn.style.backgroundColor}`;\n                }\n                applyTableFilter();\n                displaySystemNotification(`已選擇 ${a17ModeState.selectedUnits.size} 個單位`, false, 1500);\n            };\n            currentTableInstance.a17UnitButtonsContainer.appendChild(btn);\n        });\n    }\n\n    /**\n     * 更新 A17 單位篩選按鈕上的計數。\n     */\n    function updateA17UnitButtonCounts() {\n        if (!currentTableInstance.isA17Mode) return;\n        const unitCounts = {};\n        const dataToCount = baseA17MasterData;\n\n        dataToCount.forEach(row => {\n            const unitFull = String(row[FIELD_DISPLAY_NAMES_MAP.uwApproverUnit] || '');\n            let unitPrefix = 'UNDEF';\n            for (const code in UNIT_CODE_MAPPINGS) {\n                if (unitFull.toUpperCase().startsWith(code)) {\n                    unitPrefix = code;\n                    break;\n                }\n            }\n            if (unitFull.trim() === '') unitPrefix = 'UNDEF'; // 處理空值\n            unitCounts[unitPrefix] = (unitCounts[unitPrefix] || 0) + 1;\n        });\n\n        currentTableInstance.a17UnitButtonsContainer.querySelectorAll('button').forEach(btn => {\n            const unitId = btn.dataset.unitId;\n            const count = unitCounts[unitId] || 0;\n            const unitDef = A17_UNIT_BUTTONS_DEFS.find(def => def.id === unitId);\n            if (unitDef) {\n                btn.textContent = `${unitDef.label} (${count})`;\n                if (count === 0) {\n                    btn.classList.add('disabled');\n                    btn.disabled = true;\n                    btn.style.opacity = '0.6';\n                    if (a17ModeState.selectedUnits.has(unitId)) {\n                        a17ModeState.selectedUnits.delete(unitId);\n                        btn.classList.remove('highlighted');\n                        btn.style.boxShadow = 'none';\n                    }\n                } else {\n                    btn.classList.remove('disabled');\n                    btn.disabled = false;\n                    btn.style.opacity = '1';\n                }\n            }\n        });\n    }\n\n    /**\n     * 生成 A17 通知的 HTML 內容並複製到剪貼簿。\n     * @param {object[]} data - 要包含在表格中的資料。\n     * @param {string[]} headers - 表格標頭。\n     * @param {boolean} includeText - 是否包含通知文本。\n     * @param {string|null} customPreviewContent - 從預覽框來的自訂HTML內容\n     */\n    function generateAndCopyA17NotificationHTML(data, headers, includeText, customPreviewContent = null) {\n        const s = a17ModeState.textSettings;\n        const today = new Date();\n        const genDate = new Date(today); genDate.setDate(today.getDate() + s.genDateOffset);\n        const compDate = new Date(today); compDate.setDate(today.getDate() + s.compDateOffset);\n        const genDateStr = formatDate(genDate);\n        const compDateStr = formatDate(compDate);\n\n        let textContentHtml = '';\n        if (includeText) {\n            if (customPreviewContent) {\n                textContentHtml = customPreviewContent;\n            } else {\n                textContentHtml = \n                    `<div style=\"font-family:'Microsoft JhengHei',Arial,sans-serif;font-size:${s.mainFontSize}pt;line-height:${s.mainLineHeight};color:${s.mainFontColor};\">` +\n                    escapeHtml(s.mainContent).replace(/\\n/g, '<br>') +\n                    `<br><br><p style=\"font-size:${s.dateFontSize}pt;line-height:${s.dateLineHeight};color:${s.dateFontColor};margin-top:${s.dateLineHeight > 1.2 ? '10px' : '5px'};margin-bottom:${s.dateLineHeight > 1.2 ? '10px' : '5px' };\">` +\n                    `產檔時間：${genDateStr}<br>比對時間：${compDateStr}</p></div>`;\n            }\n        }\n\n        const tableRowsHtml = data.map((row, idx) =>\n            `<tr style=\"background-color:${idx % 2 ? '#f8f9fa' : '#ffffff'};\">` +\n            headers.map(header => `<td style=\"border:1px solid #dddddd;padding:5px 7px;text-align:center;font-size:10pt;color:#333333;white-space:normal;word-break:break-all;\">${escapeHtml(row[header] || '')}</td>`).join('') +\n            `</tr>`\n        ).join('');\n\n        const tableHtml = \n            `<table style=\"border-collapse:collapse;width:100%;margin-top:10px;font-family:'Microsoft JhengHei',Arial,sans-serif;font-size:10pt;\">` +\n            `<thead><tr style=\"background-color:#343a40;color:white;font-weight:bold;\">` +\n            headers.map(header => `<th style=\"border:1px solid #23272b;padding:6px 8px;text-align:center;\">${escapeHtml(header)}</th>`).join('') +\n            `</tr></thead><tbody>${tableRowsHtml}</tbody></table>`;\n        \n        const finalHtml = textContentHtml + tableHtml;\n\n        try {\n            const blobHtml = new Blob([finalHtml], { type: 'text/html' });\n            // 準備純文字版本以應對某些應用程式不支援HTML貼上的情況\n            const plainTextForClipboard = \n                (includeText ? ((customPreviewContent ? (new DOMParser().parseFromString(customPreviewContent, \"text/html\").body.textContent) : s.mainContent) + `\\n\\n產檔時間：${genDateStr}\\n比對時間：${compDateStr}\\n\\n`) : '') +\n                headers.join('\\t') + '\\n' +\n                data.map(r => headers.map(h => String(r[h] || '')).join('\\t')).join('\\n');\n            const blobText = new Blob([plainTextForClipboard], { type: 'text/plain' });\n            navigator.clipboard.write([new ClipboardItem({ 'text/html': blobHtml, 'text/plain': blobText })])\n                .then(() => displaySystemNotification('A17通知已複製 (HTML格式)', false))\n                .catch(err => {\n                    console.error('HTML Clipboard API 失敗:', err);\n                    // 如果HTML複製失敗，嘗試只複製純文字\n                    navigator.clipboard.writeText(plainTextForClipboard)\n                       .then(() => displaySystemNotification('A17通知已複製 (純文字)', false))\n                       .catch(txtErr => displaySystemNotification('複製失敗', true));\n                });\n        } catch(e) {\n            console.error('ClipboardItem API 不可用:', e);\n            const plainFallback = \n                (includeText ? ((customPreviewContent ? (new DOMParser().parseFromString(customPreviewContent, \"text/html\").body.textContent) : s.mainContent) + `\\n\\n產檔時間：${genDateStr}\\n比對時間：${compDateStr}\\n\\n`) : '') +\n                headers.join('\\t') + '\\n' +\n                data.map(r => headers.map(h => String(r[h] || '')).join('\\t')).join('\\n');\n            navigator.clipboard.writeText(plainFallback)\n               .then(() => displaySystemNotification('A17通知已複製 (純文字)', false))\n               .catch(txtErr => displaySystemNotification('複製失敗', true));\n        }\n    }\n\n    // =======================================================================\n    // MODULE: 主執行流程 (Main Execution Flow)\n    // -----------------------------------------------------------------------\n    // 程式的進入點，負責協調各模組，完成從設定到顯示結果的整個流程。\n    // =======================================================================\n\n    /**\n     * 執行案件查詢工具的主流程。\n     */\n    async function executeCaseQueryTool() {\n        if (document.getElementById(TOOL_MAIN_CONTAINER_ID)) {\n            displaySystemNotification('查詢工具已開啟', true);\n            return;\n        }\n\n        // 1. 選擇環境\n        const selectedEnv = await createEnvSelectionDialog();\n        if (!selectedEnv) { displaySystemNotification('操作已取消', true); return; }\n        CURRENT_API_URL = selectedEnv === 'prod' ? API_URL_PROD : API_URL_UAT;\n        displaySystemNotification(`環境: ${selectedEnv === 'prod' ? '正式' : '測試'}`, false);\n\n        // 2. 處理 Token\n        let tokenIsValid = !!apiAuthToken;\n        if (!tokenIsValid) {\n            let tokenAttempt = 1;\n            while (true) {\n                const tokenResult = await createTokenDialog(tokenAttempt);\n                if (tokenResult === '_close_tool_') { displaySystemNotification('工具已關閉', false); return; }\n                if (tokenResult === '_skip_token_') { apiAuthToken = null; displaySystemNotification('已略過Token輸入', false); break; }\n                if (tokenResult === '_token_dialog_cancel_') { displaySystemNotification('Token輸入已取消', true); return; }\n                if (tokenResult && tokenResult.trim() !== '') {\n                    apiAuthToken = tokenResult.trim();\n                    localStorage.setItem(TOKEN_STORAGE_KEY, apiAuthToken);\n                    displaySystemNotification('Token已設定', false);\n                    break;\n                } else {\n                    if(tokenAttempt >= 2) {} else { displaySystemNotification('Token未輸入', true); }\n                }\n                tokenAttempt++;\n                if (tokenAttempt > 2 && (!tokenResult || tokenResult.trim() === '')) break; \n            }\n        }\n\n        // 3. 設定查詢條件\n        const querySetupResult = await createQuerySetupDialog();\n        if (!querySetupResult) { displaySystemNotification('操作已取消', true); return; }\n        selectedQueryDefinitionGlobal = QUERYABLE_FIELD_DEFINITIONS.find(qdf => qdf.queryApiKey === querySetupResult.selectedApiKey);\n        const queryValues = querySetupResult.queryValues.split(/[\\s,;\\n]+/).map(x => x.trim().toUpperCase()).filter(Boolean);\n        if (queryValues.length === 0) { displaySystemNotification('未輸入有效查詢值', true); return; }\n\n        // 4. 顯示讀取畫面並執行查詢\n        const loadingDialog = createDialogBase('_Loading', \n            `<h3 class=\"qt-dialog-title\" id=\"${TOOL_MAIN_CONTAINER_ID}_LoadingTitle\">查詢中...</h3>` +\n            `<p id=\"${TOOL_MAIN_CONTAINER_ID}_LoadingMsg\" style=\"text-align:center;font-size:13px;color:#555;\">處理中...</p>` +\n            `<div style=\"width:40px;height:40px;border:4px solid #f3f3f3;border-top:4px solid #3498db;border-radius:50%;margin:15px auto;animation:qtSpin 1s linear infinite;\"></div>`,\n            '300px', 'auto', 'text-align:center;'\n        );\n        const loadingTitleEl = loadingDialog.dialog.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_LoadingTitle`);\n        const loadingMsgEl = loadingDialog.dialog.querySelector(`#${TOOL_MAIN_CONTAINER_ID}_LoadingMsg`);\n        \n        originalQueryResults = [];\n        let currentQueryCount = 0;\n        for (const singleQueryValue of queryValues) {\n            currentQueryCount++;\n            if(loadingTitleEl) loadingTitleEl.textContent = `查詢中 (${currentQueryCount}/${queryValues.length})`;\n            if(loadingMsgEl) loadingMsgEl.textContent = `正在處理: ${singleQueryValue}`;\n            \n            const resultRowBase = {\n                [FIELD_DISPLAY_NAMES_MAP.NO]: String(currentQueryCount),\n                [FIELD_DISPLAY_NAMES_MAP._queriedValue_]: singleQueryValue\n            };\n\n            const apiResult = await performApiQuery(singleQueryValue, selectedQueryDefinitionGlobal.queryApiKey);\n            let apiQueryStatusText = '❌ 查詢失敗';\n\n            if (apiResult.error === 'token_invalid') {\n                apiQueryStatusText = '❌ TOKEN失效';\n                loadingDialog.overlay.remove();\n                displaySystemNotification('Token已失效或無效，請重新設定Token後再次查詢。', true, 5000);\n                apiAuthToken = null; // 清除無效token\n                return;\n            } else if (apiResult.success) {\n                apiQueryStatusText = '✔️ 成功';\n            } else if (!apiResult.error) {\n                apiQueryStatusText = '➖ 查無資料';\n            }\n            resultRowBase[FIELD_DISPLAY_NAMES_MAP._apiQueryStatus] = apiQueryStatusText;\n\n            if (apiResult.success && apiResult.data.records) {\n                apiResult.data.records.forEach(rec => {\n                    const populatedRow = { ...resultRowBase };\n                    ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(dKey => {\n                        const displayName = FIELD_DISPLAY_NAMES_MAP[dKey] || dKey;\n                        let cellValue = rec[dKey] === null || rec[dKey] === undefined ? '' : String(rec[dKey]);\n                        if (dKey === 'statusCombined') {\n                            const mainS = rec.mainStatus || '';\n                            const subS = rec.subStatus || '';\n                            populatedRow[displayName] = `<span style=\"font-weight:bold;\">${escapeHtml(mainS)}</span>` + (subS ? ` <span style=\"color:#777;\">(${escapeHtml(subS)})</span>` : '');\n                        } else if (dKey === UNIT_MAP_FIELD_API_KEY) {\n                            const unitCodePrefix = getFirstLetter(cellValue);\n                            const mappedUnitName = UNIT_CODE_MAPPINGS[unitCodePrefix] || cellValue;\n                            populatedRow[displayName] = unitCodePrefix && UNIT_CODE_MAPPINGS[unitCodePrefix] ? `${unitCodePrefix}-${mappedUnitName.replace(/^[A-Z]-/, '')}` : mappedUnitName;\n                        } else if (dKey === 'uwApprover' || dKey === 'approvalUser') {\n                            populatedRow[displayName] = extractName(cellValue);\n                        } else {\n                            populatedRow[displayName] = cellValue;\n                        }\n                    });\n                    originalQueryResults.push(populatedRow);\n                });\n            } else {\n                ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(dKey => {\n                    resultRowBase[FIELD_DISPLAY_NAMES_MAP[dKey] || dKey] = '-';\n                });\n                originalQueryResults.push(resultRowBase);\n            }\n        }\n\n        loadingDialog.overlay.remove();\n\n        // 5. 渲染結果\n        if (originalQueryResults.length > 0) {\n            originalQueryResults.sort((a,b) => (parseInt(a[FIELD_DISPLAY_NAMES_MAP.NO]) || 0) - (parseInt(b[FIELD_DISPLAY_NAMES_MAP.NO]) || 0));\n        }\n        \n        // 重置狀態後再渲染\n        currentTableInstance.isA17Mode = false;\n        a17ModeState.isActive = false;\n        isEditMode = false;\n\n        renderResultsTableUI(originalQueryResults);\n        displaySystemNotification(`查詢完成！共處理 ${queryValues.length} 個查詢值，獲取 ${originalQueryResults.length} 筆資料`, false, 3500);\n    }\n\n    /**\n     * 程式進入點的 IIFE (立即執行函式)。\n     */\n    (function initialize() {\n        // 清理舊的 UI 元素，以防意外殘留\n        document.getElementById(TOOL_MAIN_CONTAINER_ID)?.remove();\n        ['EnvSelect', 'Token', 'QuerySetup', 'A17TextSettings', 'Loading', 'CSVPurpose', 'CSVColSelect', 'CSVCheckbox'].forEach(suffix => {\n            const el = document.getElementById(TOOL_MAIN_CONTAINER_ID + '_' + suffix + '_overlay');\n            if (el) el.remove();\n        });\n        document.getElementById(TOOL_MAIN_CONTAINER_ID + '_Notification')?.remove();\n\n        // 載入設定\n        loadA17TextSettings();\n        \n        // 啟動主流程\n        executeCaseQueryTool();\n    })();\n\n})()"
  },
  {
    "id": "A17_06",
    "description": "a17",
    "category": "a17",
    "type": "utility",
    "action_script": "javascript:(async () => {\n    const API_URL_UAT = 'https://euisv-uat.apps.tocp4.kgilife.com.tw/euisw/euisb/api/caseQuery/query',\n        API_URL_PROD = 'https://euisv.apps.ocp4.kgilife.com.tw/euisw/euisb/api/caseQuery/query',\n        TOKEN_STORAGE_KEY = 'euisToken',\n        Z_INDEX_DIALOG = 2147483640,\n        Z_INDEX_MAIN_UI = 2147483630,\n        Z_INDEX_NOTIFICATION = 2147483647;\n    let CURRENT_API_URL = '',\n        apiAuthToken = localStorage.getItem(TOKEN_STORAGE_KEY),\n        selectedQueryDefinitionGlobal = null,\n        originalQueryResults = [],\n        baseA17MasterData = [],\n        isEditMode = false,\n        currentTableInstance = {\n            sortDirections: {},\n            currentHeaders: [],\n            isA17Mode: false,\n            isCSVImportModeGlobal: false\n        },\n        a17ModeState = {\n            isActive: false,\n            selectedUnits: new Set(),\n            sortedData: []\n        },\n        csvImportState = {\n            isImported: false,\n            headers: [],\n            selectedColumn: null,\n            fileName: '',\n            csvHeaders: []\n        };\n    const QUERYABLE_FIELD_DEFINITIONS = [{\n        queryApiKey: 'receiptNumber',\n        queryDisplayName: '送金單號碼',\n        color: '#007bff'\n    }, {\n        queryApiKey: 'applyNumber',\n        queryDisplayName: '受理號碼',\n        color: '#6f42c1'\n    }, {\n        queryApiKey: 'policyNumber',\n        queryDisplayName: '保單號碼',\n        color: '#28a745'\n    }, {\n        queryApiKey: 'approvalNumber',\n        queryDisplayName: '確認書編號',\n        color: '#fd7e14'\n    }, {\n        queryApiKey: 'insuredId',\n        queryDisplayName: '被保人ＩＤ',\n        color: '#17a2b8'\n    }],\n        ALL_DISPLAY_FIELDS_API_KEYS_MAIN = ['applyNumber', 'policyNumber', 'approvalNumber', 'receiptNumber', 'insuredId', 'statusCombined', 'uwApproverUnit', 'uwApprover', 'approvalUser'],\n        FIELD_DISPLAY_NAMES_MAP = {\n            applyNumber: '受理號碼',\n            policyNumber: '保單號碼',\n            approvalNumber: '確認書編號',\n            receiptNumber: '送金單',\n            insuredId: '被保人ＩＤ',\n            statusCombined: '狀態',\n            uwApproverUnit: '分公司',\n            uwApprover: '核保員',\n            approvalUser: '覆核'\n        },\n        UNIT_MAP_FIELD_API_KEY = 'uwApproverUnit',\n        UNIT_CODE_MAPPINGS = {\n            H: '核保部',\n            B: '北一',\n            C: '台中',\n            K: '高雄',\n            N: '台南',\n            P: '北二',\n            T: '桃竹',\n            G: '保作'\n        },\n        A17_UNIT_BUTTONS_DEFS = [{\n            id: 'H',\n            label: 'H-總公司',\n            color: '#007bff'\n        }, {\n            id: 'B',\n            label: 'B-北一',\n            color: '#28a745'\n        }, {\n            id: 'P',\n            label: 'P-北二',\n            color: '#ffc107'\n        }, {\n            id: 'T',\n            label: 'T-桃竹',\n            color: '#17a2b8'\n        }, {\n            id: 'C',\n            label: 'C-台中',\n            color: '#fd7e14'\n        }, {\n            id: 'N',\n            label: 'N-台南',\n            color: '#6f42c1'\n        }, {\n            id: 'K',\n            label: 'K-高雄',\n            color: '#e83e8c'\n        }, {\n            id: 'UNDEF',\n            label: '查無',\n            color: '#546e7a'\n        }],\n        A17_CSV_DISPLAY_HEADERS = ['送金單', '科目代碼', '幣別', '餘額', '入帳日期', '入帳人員', '保單狀態'],\n        A17_API_DATA_DISPLAY_HEADERS = ['受理號碼', '保單號碼', '確認書編號', '分公司', '核保員'],\n        A17_COPY_ONLY_HEADERS = ['送金單', '科目代碼', '幣別', '餘額', '入帳日期', '入帳人員', '保單狀態', '保單號碼', '分公司', '核保員', '', ''],\n        A17_PARA1 = \"您好，\",\n        A17_PARA2_TEMPLATE = \"依據【管理報表：A17 新契約異常帳務】所載內容，本週報表中列示之送金單號碼，涉及多項帳務異常情形，例如：溢繳、短收、取消件需退費、無相對應之案件等問題。\",\n        A17_PARA3 = \"經逐筆查詢比對後，該等送金單應對應至下表所列之新契約案件，敬請協助確認各案件之帳務狀況，謝謝。\";\n    let textSettings = {\n        content: A17_PARA1 + '\\n\\n' + A17_PARA2_TEMPLATE + '\\n\\n' + A17_PARA3,\n        fontSize: 10.5,\n        lineHeight: 1.5\n    };\n    function loadTextSettings() {\n        const saved = localStorage.getItem('qt_a17_text_settings');\n        if (saved) try {\n            textSettings = { ...textSettings,\n                ...JSON.parse(saved)\n            }\n        } catch (e) {}\n    }\n    function saveTextSettings() {\n        localStorage.setItem('qt_a17_text_settings', JSON.stringify(textSettings))\n    }\n    function escapeHtml(s) {\n        return s === undefined || s === null ? '' : String(s).replace(/[&<\"']/g, m => ({\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#039;'\n        })[m])\n    }\n    function displaySystemNotification(msg, err, dur = 2000) {\n        const nId = 'qtNotif_vFinal';\n        document.getElementById(nId)?.remove();\n        const n = document.createElement('div');\n        n.id = nId;\n        n.style.cssText = `position:fixed;top:10px;right:10px;background:${err?'#c0392b':'#27ae60'};color:white;padding:6px 9px;border-radius:3px;z-index:${Z_INDEX_NOTIFICATION};font-weight:500;font-size:12px;transform:translateX(calc(100% + 15px));transition:transform 0.25s;box-shadow:0 1px 5px rgba(0,0,0,0.12);font-family:'Microsoft JhengHei',Arial,sans-serif;`;\n        n.innerHTML = `${err?'&#x26A0;':'&#x2714;'} <span>${escapeHtml(msg)}</span>`;\n        document.body.appendChild(n);\n        setTimeout(() => n.style.transform = 'translateX(0)', 20);\n        setTimeout(() => {\n            n.style.transform = 'translateX(calc(100% + 15px))';\n            setTimeout(() => n.remove(), 250)\n        }, dur)\n    }\n    function createDialogBase(id, contentHtml, minWidth = '320px', maxWidth = '480px') {\n        document.getElementById(id)?.remove();\n        const d = document.createElement('div');\n        d.id = id;\n        d.style.cssText = `position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;padding:16px;border-radius:8px;box-shadow:0 8px 32px rgba(0,0,0,0.2);min-width:${minWidth};max-width:${maxWidth};z-index:${Z_INDEX_DIALOG};font-family:'Microsoft JhengHei',Arial,sans-serif;`;\n        d.innerHTML = contentHtml + `<style>.qt-dialog-btn-final{border:none;padding:8px 16px;border-radius:4px;font-size:13px;cursor:pointer;font-weight:500;transition:all 0.2s ease;margin-left:4px}.qt-dialog-btn-final:hover{opacity:0.8}.qt-dialog-btn-blue{background:#007bff;color:white}.qt-dialog-btn-grey{background:#6c757d;color:white}.qt-dialog-btn-orange{background:#fd7e14;color:white}</style>`;\n        document.body.appendChild(d);\n        return {\n            dialog: d\n        }\n    }\n    function extractName(strVal) {\n        if (!strVal || typeof strVal !== 'string') return '';\n        const m = strVal.match(/^[\\u4e00-\\u9fa5\\uff0a*\\u00b7\\uff0e]+(?=\\s|$)/);\n        return m ? m[0] : strVal.split(' ')[0]\n    }\n    function createEnvSelectionDialog() {\n        return new Promise(resolve => {\n            const html = `<h3 style=\"margin:0 0 10px 0;color:#333;font-size:16px;text-align:center;font-weight:700;\">選擇查詢環境</h3><div style=\"display:flex;gap:8px;justify-content:center;\"><button class=\"qt-env-btn\" data-v=\"test\" style=\"background:#27ae60;color:white;padding:10px 16px;border:none;border-radius:5px;font-size:14px;cursor:pointer;font-weight:bold;\">測試 (UAT)</button><button class=\"qt-env-btn\" data-v=\"prod\" style=\"background:#d35400;color:white;padding:10px 16px;border:none;border-radius:5px;font-size:14px;cursor:pointer;font-weight:bold;\">正式 (PROD)</button></div>`;\n            const {\n                dialog\n            } = createDialogBase('qtEnvSelDialog', html);\n            dialog.querySelectorAll('.qt-env-btn').forEach(b => {\n                b.onmouseover = () => b.style.opacity = '0.8';\n                b.onmouseout = () => b.style.opacity = '1';\n                b.onclick = () => {\n                    dialog.remove();\n                    resolve(b.dataset.v)\n                }\n            })\n        })\n    }\n    function createTokenDialog() {\n        return new Promise(resolve => {\n            const html = `<h3 style=\"margin:0 0 12px 0;color:#333;font-size:16px;text-align:center;font-weight:600;\">API TOKEN 設定</h3><input type=\"password\" id=\"qt-token-input\" style=\"width:100%;padding:8px;border:1px solid #ddd;border-radius:4px;font-size:14px;margin-bottom:12px;color:#333;box-sizing:border-box;outline:none;\" placeholder=\"請輸入您的 API TOKEN\"><div style=\"text-align:right;display:flex;justify-content:flex-end;gap:8px;\"><button id=\"qt-token-skip\" class=\"qt-dialog-btn-final qt-dialog-btn-orange\">略過</button><button id=\"qt-token-cancel\" class=\"qt-dialog-btn-final qt-dialog-btn-grey\">取消</button><button id=\"qt-token-ok\" class=\"qt-dialog-btn-final qt-dialog-btn-blue\">確定</button></div>`;\n            const {\n                dialog\n            } = createDialogBase('qtTokenDialog_final', html, '320px', '400px');\n            setTimeout(() => {\n                const inputEl = document.getElementById('qt-token-input');\n                if (inputEl) inputEl.focus()\n            }, 100);\n            const cleanup = value => {\n                document.removeEventListener('keydown', keyHandler);\n                dialog.remove();\n                resolve(value)\n            };\n            const keyHandler = e => {\n                if (e.key === 'Escape') {\n                    cleanup(null)\n                } else if (e.key === 'Enter') {\n                    e.preventDefault();\n                    const inputEl = document.getElementById('qt-token-input');\n                    cleanup(inputEl ? inputEl.value.trim() : '')\n                }\n            };\n            document.addEventListener('keydown', keyHandler);\n            document.getElementById('qt-token-ok').onclick = () => {\n                const inputEl = document.getElementById('qt-token-input');\n                cleanup(inputEl ? inputEl.value.trim() : '')\n            };\n            document.getElementById('qt-token-cancel').onclick = () => cleanup(null);\n            document.getElementById('qt-token-skip').onclick = () => cleanup('_QT_SKIP_')\n        })\n    }\n    function createQuerySetupDialog(currentApiKey) {\n        return new Promise(resolve => {\n            let selApiKey = currentApiKey || QUERYABLE_FIELD_DEFINITIONS[0]?.queryApiKey;\n            const btns = QUERYABLE_FIELD_DEFINITIONS.map(d => `<button class=\"qt-querytype-btn-final\" data-apikey=\"${d.queryApiKey}\" style=\"background-color:${d.color};color:white;border:2px solid transparent;padding:5px 0;flex-grow:1;text-align:center;border-radius:3px;font-size:11.5px;font-weight:500;cursor:pointer;transition:all 0.15s ease;height:26px;line-height:1.2;\">${escapeHtml(d.queryDisplayName)}</button>`).join('');\n            const html = `<h3 style=\"margin:0 0 8px 0;color:#333;font-size:15px;text-align:center;font-weight:700;\">選擇查詢條件</h3><div id=\"qt-querytype-buttons-final\" style=\"display:flex;gap:4px;margin-bottom:8px;\">${btns}</div><textarea id=\"qt-queryvalues-input-final\" style=\"width:100%;min-height:45px;padding:6px;border:1px solid #ccc;border-radius:3px;font-size:12px;margin-bottom:8px;color:#333;resize:vertical;box-sizing:border-box;\" placeholder=\"請先選擇上方查詢欄位\"></textarea><div style=\"display:flex;justify-content:space-between;align-items:center;gap:8px;\"><button id=\"qt-clear-input-btn\" class=\"qt-dialog-btn-final qt-dialog-btn-orange\">清除</button><button id=\"qt-import-csv-btn\" class=\"qt-dialog-btn-final qt-dialog-btn-grey\">匯入檔案</button><button id=\"qt-querysetup-cancel-final\" class=\"qt-dialog-btn-final qt-dialog-btn-grey\">取消</button><button id=\"qt-querysetup-ok-final\" class=\"qt-dialog-btn-final qt-dialog-btn-blue\">確認</button></div><input type=\"file\" id=\"qt-csv-file-input\" accept=\".csv,.txt\" style=\"display:none;\">`;\n            const {\n                dialog\n            } = createDialogBase('qtQuerySetupDialog_final', html, '420px', '600px');\n            const qvInput = document.getElementById('qt-queryvalues-input-final');\n            const typeBtns = dialog.querySelectorAll('.qt-querytype-btn-final');\n            const csvFileInput = document.getElementById('qt-csv-file-input');\n            const importCsvBtn = document.getElementById('qt-import-csv-btn');\n            function setActiveButton(apiKey) {\n                typeBtns.forEach(b => {\n                    const isSel = b.dataset.apikey === apiKey;\n                    b.style.borderColor = isSel ? b.style.backgroundColor : 'transparent';\n                    b.style.boxShadow = isSel ? `0 0 0 1.5px #fff, 0 0 0 3px ${b.style.backgroundColor}` : 'none';\n                    b.style.filter = isSel ? 'brightness(1.12)' : 'brightness(1)';\n                    if (isSel) {\n                        const selDef = QUERYABLE_FIELD_DEFINITIONS.find(d => d.queryApiKey === apiKey);\n                        qvInput.placeholder = `請輸入${selDef.queryDisplayName}(可多筆，用空格、逗號、分號或換行分隔)`\n                    }\n                })\n            }\n            typeBtns.forEach(b => {\n                b.onclick = () => {\n                    selApiKey = b.dataset.apikey;\n                    setActiveButton(selApiKey);\n                    qvInput.focus()\n                }\n            });\n            setActiveButton(selApiKey);\n            document.getElementById('qt-clear-input-btn').onclick = () => {\n                qvInput.value = '';\n                const csvColSel = document.getElementById('qt-csv-col-sel');\n                if (csvColSel) {\n                    csvColSel.parentElement.remove()\n                }\n                currentTableInstance.isCSVImportModeGlobal = false;\n                csvImportState = {\n                    isImported: false,\n                    headers: [],\n                    selectedColumn: null,\n                    fileName: '',\n                    csvHeaders: []\n                };\n                const csvFileInput = document.getElementById('qt-csv-file-input');\n                if (csvFileInput) {\n                    csvFileInput.value = ''\n                }\n                if (selApiKey) {\n                    setActiveButton(selApiKey)\n                }\n                qvInput.focus();\n                displaySystemNotification('已清除所有匯入資料', false)\n            };\n            importCsvBtn.onclick = () => csvFileInput.click();\n            csvFileInput.onchange = e => {\n                const file = e.target.files[0];\n                if (!file) return;\n                const reader = new FileReader();\n                reader.onload = re => {\n                    try {\n                        const text = re.target.result;\n                        const lines = text.split(/\\r?\\n/).filter(l => l.trim() !== \"\");\n                        if (lines.length < 2) {\n                            displaySystemNotification('CSV檔案資料不足', true);\n                            return\n                        }\n                        currentTableInstance.isCSVImportModeGlobal = true;\n                        csvImportState.isImported = true;\n                        csvImportState.fileName = file.name;\n                        const headers = lines[0].split(/,|;|\\t/).map(h => h.trim());\n                        csvImportState.headers = headers;\n                        csvImportState.csvHeaders = headers;\n                        const oldSelector = document.getElementById('qt-csv-col-sel');\n                        if (oldSelector) {\n                            oldSelector.parentElement.remove()\n                        }\n                        let selectHtml = `<div style=\"margin-bottom:8px;\"><label style=\"font-weight:bold;\">選擇查詢依據欄位：</label><select id=\"qt-csv-col-sel\" style=\"margin:0 8px 8px 0;\">`;\n                        headers.forEach((h, idx) => selectHtml += `<option value=\"${idx}\">${h}</option>`);\n                        selectHtml += `</select><span style=\"font-size:11px;color:#666;\">(檔案: ${file.name})</span></div>`;\n                        qvInput.insertAdjacentHTML('beforebegin', selectHtml);\n                        const colSel = document.getElementById('qt-csv-col-sel');\n                        function fillInputByCol(colIdx) {\n                            const values = [];\n                            for (let i = 1; i < lines.length; i++) {\n                                const cols = lines[i].split(/,|;|\\t/);\n                                if (cols[colIdx] && cols[colIdx].trim() !== \"\") values.push(cols[colIdx].trim())\n                            }\n                            const uniq = Array.from(new Set(values));\n                            qvInput.value = uniq.join('\\n');\n                            csvImportState.selectedColumn = colIdx\n                        }\n                        colSel.onchange = () => fillInputByCol(Number(colSel.value));\n                        fillInputByCol(0);\n                        displaySystemNotification('CSV匯入成功，請選擇查詢依據欄位', false)\n                    } catch (err) {\n                        displaySystemNotification('CSV解析失敗', true)\n                    }\n                };\n                reader.onerror = () => displaySystemNotification('讀取檔案失敗', true);\n                reader.readAsText(file, 'utf-8');\n                e.target.value = null\n            };\n            document.getElementById('qt-querysetup-ok-final').onclick = () => {\n                const vs = qvInput.value.trim();\n                if (!selApiKey) {\n                    displaySystemNotification('請選擇查詢類型', true);\n                    return\n                }\n                if (!vs) {\n                    displaySystemNotification('請輸入查詢內容', true);\n                    qvInput.focus();\n                    return\n                }\n                dialog.remove();\n                resolve({\n                    selectedApiKey: selApiKey,\n                    queryValues: vs\n                })\n            };\n            document.getElementById('qt-querysetup-cancel-final').onclick = () => {\n                dialog.remove();\n                resolve(null)\n            }\n        })\n    }\n    function createTextSettingDialog() {\n        return new Promise(resolve => {\n            const html = `<h3 style=\"margin:0 0 15px 0;color:#333;font-size:16px;text-align:center;font-weight:600;\">A17 文本設定</h3><div style=\"margin-bottom:12px;\"><label style=\"display:block;margin-bottom:5px;font-weight:500;color:#555;\">文本內容：</label><textarea id=\"qt-text-content\" style=\"width:100%;height:120px;padding:8px;border:1px solid #ddd;border-radius:4px;font-size:13px;color:#333;box-sizing:border-box;resize:vertical;font-family:'Microsoft JhengHei',Arial,sans-serif;\" placeholder=\"請輸入 A17 通知文本內容...\">${escapeHtml(textSettings.content)}</textarea></div><div style=\"display:flex;gap:15px;margin-bottom:15px;\"><div style=\"flex:1;\"><label style=\"display:block;margin-bottom:5px;font-weight:500;color:#555;\">字體大小：</label><input type=\"number\" id=\"qt-font-size\" style=\"width:100%;padding:6px;border:1px solid #ddd;border-radius:4px;font-size:13px;color:#333;box-sizing:border-box;\" value=\"${textSettings.fontSize}\" min=\"8\" max=\"24\" step=\"0.5\"><small style=\"color:#666;\">pt</small></div><div style=\"flex:1;\"><label style=\"display:block;margin-bottom:5px;font-weight:500;color:#555;\">行高：</label><input type=\"number\" id=\"qt-line-height\" style=\"width:100%;padding:6px;border:1px solid #ddd;border-radius:4px;font-size:13px;color:#333;box-sizing:border-box;\" value=\"${textSettings.lineHeight}\" min=\"1\" max=\"3\" step=\"0.1\"><small style=\"color:#666;\">倍數</small></div></div><div style=\"background:#f8f9fa;padding:10px;border-radius:4px;margin-bottom:15px;\"><div style=\"font-size:11px;color:#666;margin-bottom:5px;\">預覽效果：</div><div id=\"qt-text-preview\" style=\"font-size:${textSettings.fontSize}pt;line-height:${textSettings.lineHeight};color:#333;max-height:80px;overflow-y:auto;border:1px solid #e9ecef;padding:8px;background:white;border-radius:3px;\">${escapeHtml(textSettings.content.substring(0,100))}...</div></div><div style=\"text-align:right;display:flex;justify-content:flex-end;gap:8px;\"><button id=\"qt-text-reset\" class=\"qt-dialog-btn-final qt-dialog-btn-orange\">重設</button><button id=\"qt-text-cancel\" class=\"qt-dialog-btn-final qt-dialog-btn-grey\">取消</button><button id=\"qt-text-save\" class=\"qt-dialog-btn-final qt-dialog-btn-blue\">存檔</button></div>`;\n            const {\n                dialog\n            } = createDialogBase('qtTextSettingDialog_final', html, '480px', '600px');\n            function updatePreview() {\n                const content = document.getElementById('qt-text-content').value;\n                const fontSize = document.getElementById('qt-font-size').value;\n                const lineHeight = document.getElementById('qt-line-height').value;\n                const preview = document.getElementById('qt-text-preview');\n                preview.style.fontSize = fontSize + 'pt';\n                preview.style.lineHeight = lineHeight;\n                preview.textContent = content.substring(0, 100) + (content.length > 100 ? '...' : '')\n            }\n            setTimeout(() => {\n                document.getElementById('qt-text-content').addEventListener('input', updatePreview);\n                document.getElementById('qt-font-size').addEventListener('input', updatePreview);\n                document.getElementById('qt-line-height').addEventListener('input', updatePreview)\n            }, 100);\n            document.getElementById('qt-text-save').onclick = () => {\n                const newSettings = {\n                    content: document.getElementById('qt-text-content').value.trim(),\n                    fontSize: parseFloat(document.getElementById('qt-font-size').value),\n                    lineHeight: parseFloat(document.getElementById('qt-line-height').value)\n                };\n                if (!newSettings.content) {\n                    displaySystemNotification('請輸入文本內容', true);\n                    return\n                }\n                textSettings = newSettings;\n                saveTextSettings();\n                displaySystemNotification('文本設定已保存', false);\n                dialog.remove();\n                resolve(true)\n            };\n            document.getElementById('qt-text-cancel').onclick = () => {\n                dialog.remove();\n                resolve(false)\n            };\n            document.getElementById('qt-text-reset').onclick = () => {\n                document.getElementById('qt-text-content').value = A17_PARA1 + '\\n\\n' + A17_PARA2_TEMPLATE + '\\n\\n' + A17_PARA3;\n                document.getElementById('qt-font-size').value = 10.5;\n                document.getElementById('qt-line-height').value = 1.5;\n                updatePreview()\n            }\n        })\n    }\n    async function performApiQuery(queryValue) {\n        const reqBody = {\n            currentPage: 1,\n            pageSize: 10\n        };\n        reqBody[selectedQueryDefinitionGlobal.queryApiKey] = queryValue;\n        const fetchOpts = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(reqBody)\n        };\n        if (apiAuthToken) {\n            fetchOpts.headers['SSO-TOKEN'] = apiAuthToken\n        }\n        try {\n            const res = await fetch(CURRENT_API_URL, fetchOpts);\n            const data = await res.json();\n            if (res.status === 401) {\n                displaySystemNotification('TOKEN無效或已過期', true);\n                return {\n                    error: 'token_invalid',\n                    data: null\n                }\n            }\n            return {\n                error: null,\n                data: data,\n                success: data && data.records && data.records.length > 0\n            }\n        } catch (e) {\n            console.error('查詢失敗:', e);\n            return {\n                error: 'network_error',\n                data: null\n            }\n        }\n    }\n    function getFirstLetter(unitString) {\n        if (!unitString || typeof unitString !== 'string') return 'Z';\n        for (let i = 0; i < unitString.length; i++) {\n            const char = unitString.charAt(i).toUpperCase();\n            if (/[A-Z]/.test(char)) {\n                return char\n            }\n        }\n        return 'Z'\n    }\n    function filterDataByUnit(data, unitId) {\n        if (unitId === 'UNDEF') {\n            const knownPrefixes = A17_UNIT_BUTTONS_DEFS.filter(b => b.id !== 'UNDEF').map(b => b.id.toUpperCase());\n            return data.filter(r => {\n                const uVal = String(r[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n                return uVal.trim() === '' || !knownPrefixes.some(prefix => uVal.toUpperCase().startsWith(prefix))\n            })\n        } else {\n            return data.filter(r => {\n                const uVal = String(r[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n                return uVal.toUpperCase().startsWith(unitId.toUpperCase())\n            })\n        }\n    }\n    function createA17UnitButtons() {\n        const a17BtnsCtr = document.getElementById('qt-a17-unit-btns-ctr-final');\n        if (!a17BtnsCtr) return;\n        a17BtnsCtr.style.cssText = 'margin-bottom:5px;display:flex;flex-wrap:nowrap;gap:4px;justify-content:flex-start;flex-shrink:0;margin-left:260px;visibility:visible;';\n        a17BtnsCtr.innerHTML = '';\n        A17_UNIT_BUTTONS_DEFS.forEach(unitDef => {\n            const btn = document.createElement('button');\n            btn.dataset.unitId = unitDef.id;\n            btn.style.cssText = `background-color:${unitDef.color};color:white;border:none;padding:5px 4px;border-radius:3px;cursor:pointer;font-size:9px;transition:all 0.2s ease;width:calc((100vw - 320px) / 8);min-width:70px;max-width:90px;text-align:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;`;\n            btn.textContent = `${unitDef.label} (0)`;\n            btn.onclick = () => {\n                if (btn.disabled) return;\n                const unitId = btn.dataset.unitId;\n                if (a17ModeState.selectedUnits.has(unitId)) {\n                    a17ModeState.selectedUnits.delete(unitId);\n                    btn.classList.remove('highlighted');\n                    btn.style.boxShadow = 'none'\n                } else {\n                    a17ModeState.selectedUnits.add(unitId);\n                    btn.classList.add('highlighted');\n                    btn.style.boxShadow = '0 0 0 2px white, 0 0 0 4px black'\n                }\n                if (a17ModeState.selectedUnits.size > 0) {\n                    filterA17DataBySelectedUnits()\n                } else {\n                    window.pTBRs(baseA17MasterData)\n                }\n                displaySystemNotification(`已選擇 ${a17ModeState.selectedUnits.size} 個單位`, false)\n            };\n            a17BtnsCtr.appendChild(btn)\n        })\n    }\n    function filterA17DataBySelectedUnits() {\n        let filteredData = [];\n        a17ModeState.selectedUnits.forEach(unitId => {\n            let unitData = filterDataByUnit(baseA17MasterData, unitId);\n            filteredData = filteredData.concat(unitData)\n        });\n        filteredData.sort((a, b) => {\n            const unitA = String(a[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n            const unitB = String(b[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n            const firstLetterA = getFirstLetter(unitA);\n            const firstLetterB = getFirstLetter(unitB);\n            return firstLetterA.localeCompare(firstLetterB)\n        });\n        window.pTBRs(filteredData)\n    }\n    function updateA17UnitButtonCounts() {\n        if (!a17ModeState.isActive) return;\n        const unitCounts = {};\n        baseA17MasterData.forEach(r => {\n            const unitFull = String(r[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n            let unitPrefix = 'UNDEF';\n            for (const code in UNIT_CODE_MAPPINGS) {\n                if (unitFull.toUpperCase().startsWith(code)) {\n                    unitPrefix = code;\n                    break\n                }\n            }\n            if (unitFull.trim() === '') {\n                unitPrefix = 'UNDEF'\n            }\n            unitCounts[unitPrefix] = (unitCounts[unitPrefix] || 0) + 1\n        });\n        const buttons = document.getElementById('qt-a17-unit-btns-ctr-final')?.querySelectorAll('button') || [];\n        buttons.forEach(btn => {\n            const unitId = btn.dataset.unitId;\n            const count = unitCounts[unitId] || 0;\n            const unitDef = A17_UNIT_BUTTONS_DEFS.find(def => def.id === unitId);\n            if (unitDef) {\n                btn.textContent = `${unitDef.label} (${count})`;\n                if (count === 0) {\n                    btn.disabled = true;\n                    btn.style.opacity = '0.5';\n                    if (a17ModeState.selectedUnits.has(unitId)) {\n                        a17ModeState.selectedUnits.delete(unitId);\n                        btn.classList.remove('highlighted');\n                        btn.style.boxShadow = 'none'\n                    }\n                } else {\n                    btn.disabled = false;\n                    btn.style.opacity = '1'\n                }\n            }\n        });\n        if (a17ModeState.selectedUnits.size === 0) {\n            window.pTBRs(baseA17MasterData)\n        }\n    }\n    function generateAndCopyA17NotificationWithSettings(dataToCopy, headers, withText) {\n        loadTextSettings();\n        const htmlRows = dataToCopy.map((r, idx) => `<tr style=\"${idx%2?'background-color:#fdfdfd;':'#f7f7f7'}\">${headers.map(h=>{let cellTxt='';if(h===''){cellTxt=''}else{cellTxt=escapeHtml(String(r[h]||''))}return`<td style=\"border:1px solid #bbb;padding:3px 4px;text-align:center;font-size:${textSettings.fontSize}pt;color:#333;\">${cellTxt}</td>`}).join('')}</tr>`).join('');\n        const htmlTab = `<table style=\"border-collapse:collapse;font-family:'Microsoft JhengHei',Arial,sans-serif;font-size:${textSettings.fontSize}pt;width:100%;margin-top:8px;\"><thead><tr style=\"background-color:#34495e;color:white;\">${headers.map(h=>`<th style=\"border:1px solid #2c3e50;padding:4px;text-align:center;font-weight:bold;\">${escapeHtml(h)}</th>`).join('')}</tr></thead><tbody>${htmlRows}</tbody></table>`;\n        const htmlOut = withText ? `<div style=\"font-family:'Microsoft JhengHei',Arial,sans-serif;font-size:${textSettings.fontSize}pt;line-height:${textSettings.lineHeight};\">${textSettings.content.split('\\n').map(line=>`<p>${escapeHtml(line)}</p>`).join('')}${htmlTab}</div>` : htmlTab;\n        const plainRows = dataToCopy.map(r => headers.map(h => String(r[h] || '')).join('\\t')).join('\\n');\n        const plainOut = withText ? textSettings.content + '\\n\\n' + headers.join('\\t') + '\\n' + plainRows : headers.join('\\t') + '\\n' + plainRows;\n        try {\n            navigator.clipboard.write([new ClipboardItem({\n                'text/html': new Blob([htmlOut], {\n                    type: 'text/html'\n                }),\n                'text/plain': new Blob([plainOut], {\n                    type: 'text/plain'\n                })\n            })]).then(() => {\n                displaySystemNotification('已複製 A17 通知內容', false)\n            })\n        } catch (e) {\n            navigator.clipboard.writeText(plainOut).then(() => {\n                displaySystemNotification('已複製 A17 通知內容', false)\n            })\n        }\n    }\n    function executeA17SortAndFilter() {\n        if (!a17ModeState.isActive) {\n            a17ModeState.isActive = true;\n            currentTableInstance.isA17Mode = true;\n            const a17BtnsCtr = document.getElementById('qt-a17-unit-btns-ctr-final');\n            if (a17BtnsCtr) {\n                a17BtnsCtr.style.display = 'flex'\n            }\n            baseA17MasterData = [...originalQueryResults];\n            let a17Headers;\n            if (currentTableInstance.isCSVImportModeGlobal && csvImportState.csvHeaders.length > 0) {\n                a17Headers = [...csvImportState.csvHeaders, ...A17_API_DATA_DISPLAY_HEADERS]\n            } else {\n                a17Headers = ['送金單號碼', 'NO', '受理號碼', '保單號碼', '確認書編號', '分公司', '核保員', '覆核', '狀態', '查詢結果']\n            }\n            currentTableInstance.currentHeaders = [...a17Headers];\n            window.rTHs(a17Headers);\n            createA17UnitButtons();\n            updateA17UnitButtonCounts();\n            window.pTBRs(baseA17MasterData);\n            displaySystemNotification('已進入 A17 模式', false)\n        } else {\n            a17ModeState.isActive = false;\n            a17ModeState.selectedUnits.clear();\n            const a17BtnsCtr = document.getElementById('qt-a17-unit-btns-ctr-final');\n            if (a17BtnsCtr) {\n                a17BtnsCtr.style.display = 'none'\n            }\n            let originalHeaders = [];\n            if (selectedQueryDefinitionGlobal) {\n                originalHeaders.push(selectedQueryDefinitionGlobal.queryDisplayName)\n            } else {\n                originalHeaders.push(\"查詢值\")\n            }\n            originalHeaders.push('NO');\n            ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n                originalHeaders.push(FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey)\n            });\n            originalHeaders.push('查詢結果');\n            currentTableInstance.currentHeaders = [...originalHeaders];\n            window.rTHs(originalHeaders);\n            window.pTBRs(originalQueryResults);\n            displaySystemNotification('已退出 A17 模式', false)\n        }\n    }\n    function handleA17Copy() {\n        const isTextEnabled = document.getElementById('qt-text-enable-checkbox')?.checked || false;\n        let dataToCopy;\n        if (a17ModeState.selectedUnits.size > 0) {\n            dataToCopy = [];\n            a17ModeState.selectedUnits.forEach(unitId => {\n                let unitData = filterDataByUnit(baseA17MasterData, unitId);\n                dataToCopy = dataToCopy.concat(unitData)\n            });\n            dataToCopy.sort((a, b) => {\n                const unitA = String(a[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n                const unitB = String(b[FIELD_DISPLAY_NAMES_MAP[UNIT_MAP_FIELD_API_KEY]] || '');\n                const firstLetterA = getFirstLetter(unitA);\n                const firstLetterB = getFirstLetter(unitB);\n                return firstLetterA.localeCompare(firstLetterB)\n            })\n        } else {\n            dataToCopy = [...baseA17MasterData]\n        }\n        generateAndCopyA17NotificationWithSettings(dataToCopy, A17_COPY_ONLY_HEADERS, isTextEnabled)\n    }\n    function sortTableByColumn(columnIndex, headerName) {\n        const currentData = a17ModeState.isActive ? baseA17MasterData : originalQueryResults;\n        const header = currentTableInstance.currentHeaders[columnIndex];\n        const currentDirection = currentTableInstance.sortDirections[header] || 'asc';\n        const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';\n        currentTableInstance.sortDirections[header] = newDirection;\n        const sortedData = [...currentData].sort((a, b) => {\n            const aVal = String(a[header] || '');\n            const bVal = String(b[header] || '');\n            if (newDirection === 'asc') {\n                return aVal.localeCompare(bVal)\n            } else {\n                return bVal.localeCompare(aVal)\n            }\n        });\n        if (a17ModeState.isActive) {\n            baseA17MasterData = sortedData\n        } else {\n            originalQueryResults = sortedData\n        }\n        window.pTBRs(sortedData);\n        displaySystemNotification(`已按${headerName}${newDirection==='asc'?'升序':'降序'}排序`, false)\n    }\n    function renderResultsTableUI(dataToRender) {\n        const mainId = 'qtMainContainer_final';\n        document.getElementById(mainId)?.remove();\n        const mainUI = document.createElement('div');\n        mainUI.id = mainId;\n        mainUI.style.cssText = `position:fixed;z-index:${Z_INDEX_MAIN_UI};left:50%;top:20px;transform:translateX(-50%);background:#ffffff;border-radius:12px;box-shadow:0 10px 40px rgba(0,0,0,0.15);padding:16px;width:900px;max-width:95vw;max-height:90vh;overflow:hidden;font-family:'Microsoft JhengHei',Arial,sans-serif;font-size:13px;display:flex;flex-direction:column;border:1px solid rgba(0,0,0,0.1);`;\n        let initialTableHeaders = [];\n        if (selectedQueryDefinitionGlobal) {\n            initialTableHeaders.push(selectedQueryDefinitionGlobal.queryDisplayName)\n        } else {\n            initialTableHeaders.push(\"查詢值\")\n        }\n        initialTableHeaders.push('NO');\n        ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(apiKey => {\n            initialTableHeaders.push(FIELD_DISPLAY_NAMES_MAP[apiKey] || apiKey)\n        });\n        initialTableHeaders.push('查詢結果');\n        currentTableInstance.currentHeaders = [...initialTableHeaders];\n        const controlsHeader = document.createElement('div');\n        controlsHeader.style.cssText = 'display:flex;align-items:center;margin-bottom:5px;padding-bottom:5px;border-bottom:1px solid #ddd;flex-shrink:0;';\n        const summarySec = document.createElement('div');\n        summarySec.style.cssText = 'font-size:12px;font-weight:bold;color:#2c3e50;white-space:nowrap;margin-right:10px;flex-shrink:0;';\n        summarySec.innerHTML = `查詢結果：<strong>${dataToRender.length}</strong>筆`;\n        controlsHeader.appendChild(summarySec);\n        const filterInput = document.createElement('input');\n        filterInput.type = 'text';\n        filterInput.id = 'qt-tbl-flt-final';\n        filterInput.placeholder = '找出我要的資料。';\n        filterInput.style.cssText = 'padding:5px 7px;border:1px solid #bababa;border-radius:3px;font-size:12px;width:120px;flex-shrink:0;margin-right:10px;';\n        controlsHeader.appendChild(filterInput);\n        const buttonsGroup = document.createElement('div');\n        buttonsGroup.style.cssText = 'display:flex;align-items:center;gap:5px;flex-shrink:0;';\n        const buttonConfigs = [{\n            id: 'qt-clr-cond-btn-final',\n            text: '清除條件',\n            style: 'background:#6c757d;color:white;'\n        }, {\n            id: 'qt-req-btn-final',\n            text: '重新查詢',\n            style: 'background:#ffc107;color:#212529;'\n        }, {\n            id: 'qt-a17-btn-final',\n            text: 'A17作業通知',\n            style: 'background:#6f42c1;color:white;'\n        }, {\n            id: 'qt-cpy-all-btn-final',\n            text: '複製',\n            style: 'background:#28a745;color:white;'\n        }];\n        buttonConfigs.forEach(config => {\n            const btn = document.createElement('button');\n            btn.id = config.id;\n            btn.textContent = config.text;\n            btn.style.cssText = config.style + 'border:none;padding:5px 10px;border-radius:3px;cursor:pointer;font-size:11.5px;font-weight:500;transition:opacity 0.1s ease;white-space:nowrap;';\n            btn.onmouseover = () => btn.style.opacity = '0.8';\n            btn.onmouseout = () => btn.style.opacity = '1';\n            buttonsGroup.appendChild(btn)\n        });\n        controlsHeader.appendChild(buttonsGroup);\n        const textCheckbox = document.createElement('input');\n        textCheckbox.type = 'checkbox';\n        textCheckbox.id = 'qt-text-enable-checkbox';\n        textCheckbox.checked = true;\n        textCheckbox.style.cssText = 'margin-left:10px;cursor:pointer;';\n        const textCheckboxLabel = document.createElement('label');\n        textCheckboxLabel.htmlFor = 'qt-text-enable-checkbox';\n        textCheckboxLabel.textContent = 'A17文本';\n        textCheckboxLabel.style.cssText = 'font-size:11px;color:#555;cursor:pointer;margin:0 8px 0 2px;user-select:none;';\n        const textEditBtn = document.createElement('button');\n        textEditBtn.id = 'qt-text-edit-btn-final';\n        textEditBtn.textContent = '文本編輯';\n        textEditBtn.style.cssText = 'background:#17a2b8;color:white;font-size:10px;padding:4px 8px;border:none;border-radius:3px;cursor:pointer;';\n        textEditBtn.onmouseover = () => textEditBtn.style.opacity = '0.8';\n        textEditBtn.onmouseout = () => textEditBtn.style.opacity = '1';\n        controlsHeader.appendChild(textCheckbox);\n        controlsHeader.appendChild(textCheckboxLabel);\n        controlsHeader.appendChild(textEditBtn);\n        const editModeBtn = document.createElement('button');\n        editModeBtn.id = 'qt-edit-mode-btn-final';\n        editModeBtn.textContent = '編輯模式';\n        editModeBtn.style.cssText = 'background:#6c757d;color:white;font-size:11px;padding:5px 10px;margin-left:8px;border:none;border-radius:3px;cursor:pointer;';\n        editModeBtn.onmouseover = () => editModeBtn.style.opacity = '0.8';\n        editModeBtn.onmouseout = () => editModeBtn.style.opacity = '1';\n        controlsHeader.appendChild(editModeBtn);\n        const closeBtn = document.createElement('button');\n        closeBtn.textContent = '關閉';\n        closeBtn.style.cssText = 'background:#dc3545;color:white;margin-left:auto;border:none;padding:5px 10px;border-radius:3px;cursor:pointer;font-size:11.5px;';\n        closeBtn.onmouseover = () => closeBtn.style.opacity = '0.8';\n        closeBtn.onmouseout = () => closeBtn.style.opacity = '1';\n        closeBtn.onclick = () => mainUI.remove();\n        controlsHeader.appendChild(closeBtn);\n        mainUI.appendChild(controlsHeader);\n        const a17BtnsCtr = document.createElement('div');\n        a17BtnsCtr.id = 'qt-a17-unit-btns-ctr-final';\n        a17BtnsCtr.style.cssText = 'margin-bottom:5px;display:none;flex-wrap:nowrap;gap:4px;justify-content:flex-start;flex-shrink:0;margin-left:260px;';\n        mainUI.appendChild(a17BtnsCtr);\n        const tableScrollWrap = document.createElement('div');\n        tableScrollWrap.style.cssText = 'flex-grow:1;overflow:auto;border:1px solid #ccc;border-radius:4px;';\n        const tableEl = document.createElement('table');\n        tableEl.id = 'qt-res-tbl-final';\n        tableEl.style.cssText = 'width:100%;border-collapse:collapse;font-size:11.5px;';\n        tableScrollWrap.appendChild(tableEl);\n        mainUI.appendChild(tableScrollWrap);\n        const tHREl = document.createElement('thead');\n        tHREl.style.cssText = 'position:sticky;top:0;z-index:10;background-color:#34495e;';\n        tableEl.appendChild(tHREl);\n        const tBREl = document.createElement('tbody');\n        tableEl.appendChild(tBREl);\n        document.body.appendChild(mainUI);\n        function rTHs(hdrs) {\n            tHREl.innerHTML = '';\n            const hr = document.createElement('tr');\n            hdrs.forEach((hTxt, idx) => {\n                const th = document.createElement('th');\n                th.textContent = hTxt;\n                th.style.cssText = `color:#fff;text-align:center;padding:6px 4px;border-bottom:1px solid #2c3e50;white-space:nowrap;cursor:pointer;user-select:none;font-weight:600;border-right:1px solid #4a6075;font-size:11px;${idx===0?'background:#007bff;':''}`;\n                if (idx === hdrs.length - 1) th.style.borderRight = 'none';\n                th.onclick = () => {\n                    sortTableByColumn(idx, hTxt)\n                };\n                hr.appendChild(th)\n            });\n            tHREl.appendChild(hr)\n        }\n        function pTBRs(data) {\n            tBREl.innerHTML = '';\n            data.forEach((row, idx) => {\n                const tr = document.createElement('tr');\n                tr.style.backgroundColor = idx % 2 ? '#f8f9fa' : '#fff';\n                currentTableInstance.currentHeaders.forEach((header, colIdx) => {\n                    const td = document.createElement('td');\n                    td.style.cssText = 'padding:4px 6px;border-bottom:1px solid #dee2e6;font-size:11px;text-align:center;cursor:pointer;';\n                    if (colIdx === 0) {\n                        td.style.background = '#e3f0fd';\n                        td.style.fontWeight = 'bold'\n                    }\n                    let cellContent = row[header];\n                    if (header.includes('狀態') && typeof cellContent === 'string' && cellContent.includes('<span')) {\n                        td.innerHTML = cellContent\n                    } else {\n                        td.textContent = cellContent || ''\n                    }\n                    td.onclick = function(e) {\n                        e.stopPropagation();\n                        if (isEditMode && colIdx > 1) {\n                            startCellEdit(td, row, header, cellContent)\n                        } else {\n                            navigator.clipboard.writeText(td.textContent).then(() => {\n                                displaySystemNotification('已複製內容：' + td.textContent, false, 1000)\n                            })\n                        }\n                    };\n                    tr.appendChild(td)\n                });\n                tBREl.appendChild(tr)\n            });\n            if (a17ModeState.isActive) {\n                setTimeout(() => {\n                    updateA17UnitButtonCounts()\n                }, 100)\n            }\n        }\n        function startCellEdit(td, rowData, headerName, originalValue) {\n            if (td.querySelector('input')) return;\n            const input = document.createElement('input');\n            input.type = 'text';\n            input.value = td.textContent;\n            input.style.cssText = `width:100%;border:2px solid #007bff;padding:2px 4px;font-size:11px;background:#fff3cd;box-sizing:border-box;outline:none;`;\n            td.innerHTML = '';\n            td.appendChild(input);\n            input.focus();\n            input.select();\n            input.onkeydown = function(e) {\n                if (e.key === 'Enter') {\n                    finishEdit(td, input, rowData, headerName, originalValue)\n                } else if (e.key === 'Escape') {\n                    td.textContent = originalValue\n                }\n            };\n            input.onblur = function() {\n                finishEdit(td, input, rowData, headerName, originalValue)\n            }\n        }\n        function finishEdit(td, input, rowData, headerName, originalValue) {\n            const newValue = input.value.trim();\n            td.textContent = newValue;\n            rowData[headerName] = newValue;\n            if (newValue !== originalValue) {\n                td.style.background = '#d4edda';\n                displaySystemNotification(`已更新：${headerName}`, false, 1000);\n                if (headerName === '分公司' && a17ModeState.isActive) {\n                    const rowIndex = originalQueryResults.findIndex(row => row.NO === rowData.NO);\n                    if (rowIndex !== -1) {\n                        originalQueryResults[rowIndex][headerName] = newValue\n                    }\n                    baseA17MasterData = [...originalQueryResults];\n                    updateA17UnitButtonCounts();\n                    if (a17ModeState.selectedUnits.size > 0) {\n                        filterA17DataBySelectedUnits()\n                    }\n                }\n            }\n        }\n        function updateTableEditMode() {\n            const cells = tableEl.querySelectorAll('tbody td');\n            cells.forEach((cell, index) => {\n                const colIndex = index % currentTableInstance.currentHeaders.length;\n                if (isEditMode && colIndex > 1) {\n                    cell.style.cursor = 'text';\n                    cell.style.border = '1px dashed #007bff';\n                    cell.title = '點擊編輯，按 Enter 完成'\n                } else {\n                    cell.style.cursor = 'pointer';\n                    cell.style.border = '';\n                    cell.title = '點擊複製'\n                }\n            })\n        }\n        rTHs(currentTableInstance.currentHeaders);\n        pTBRs(dataToRender);\n        filterInput.oninput = () => {\n            const v = filterInput.value.trim().toLowerCase();\n            if (!v) {\n                pTBRs(a17ModeState.isActive ? baseA17MasterData : originalQueryResults);\n                return\n            }\n            const sourceData = a17ModeState.isActive ? baseA17MasterData : originalQueryResults;\n            const filtered = sourceData.filter(row => Object.values(row).some(val => String(val || '').toLowerCase().includes(v)));\n            pTBRs(filtered)\n        };\n        document.getElementById('qt-clr-cond-btn-final').onclick = () => {\n            a17ModeState.selectedUnits.clear();\n            const a17BtnsCtr = document.getElementById('qt-a17-unit-btns-ctr-final');\n            if (a17BtnsCtr) {\n                a17BtnsCtr.querySelectorAll('button').forEach(btn => {\n                    btn.classList.remove('highlighted');\n                    btn.style.boxShadow = 'none'\n                })\n            }\n            filterInput.value = '';\n            currentTableInstance.isCSVImportModeGlobal = false;\n            csvImportState = {\n                isImported: false,\n                headers: [],\n                selectedColumn: null,\n                fileName: '',\n                csvHeaders: []\n            };\n            if (a17ModeState.isActive) {\n                const normalA17Headers = ['送金單號碼', 'NO', '受理號碼', '保單號碼', '確認書編號', '分公司', '核保員', '覆核', '狀態', '查詢結果'];\n                currentTableInstance.currentHeaders = [...normalA17Headers];\n                window.rTHs(normalA17Headers)\n            }\n            pTBRs(originalQueryResults);\n            displaySystemNotification('條件已清除，包含CSV匯入資料', false)\n        };\n        document.getElementById('qt-req-btn-final').onclick = () => {\n            mainUI.remove();\n            executeCaseQueryTool()\n        };\n        document.getElementById('qt-a17-btn-final').onclick = () => {\n            executeA17SortAndFilter()\n        };\n        document.getElementById('qt-cpy-all-btn-final').onclick = () => {\n            if (a17ModeState.isActive) {\n                handleA17Copy()\n            } else {\n                handleNormalCopy()\n            }\n        };\n        textEditBtn.onclick = () => {\n            createTextSettingDialog()\n        };\n        editModeBtn.onclick = () => {\n            isEditMode = !isEditMode;\n            editModeBtn.textContent = isEditMode ? '退出編輯' : '編輯模式';\n            editModeBtn.style.background = isEditMode ? '#dc3545' : '#6c757d';\n            updateTableEditMode();\n            if (!isEditMode && a17ModeState.isActive) {\n                baseA17MasterData = [...originalQueryResults];\n                updateA17UnitButtonCounts();\n                if (a17ModeState.selectedUnits.size > 0) {\n                    filterA17DataBySelectedUnits()\n                } else {\n                    window.pTBRs(baseA17MasterData)\n                }\n                displaySystemNotification('已更新A17分公司篩選狀態', false)\n            }\n        };\n        window.pTBRs = pTBRs;\n        window.rTHs = rTHs\n    }\n    function handleNormalCopy() {\n        const dataToCopy = [...originalQueryResults];\n        const headers = currentTableInstance.currentHeaders;\n        const rows = dataToCopy.map(row => headers.map(header => String(row[header] || '')).join('\\t')).join('\\n');\n        const textOutput = headers.join('\\t') + '\\n' + rows;\n        navigator.clipboard.writeText(textOutput).then(() => {\n            displaySystemNotification(`已複製 ${dataToCopy.length} 筆查詢結果`, false)\n        }).catch(e => {\n            console.error('複製失敗:', e);\n            displaySystemNotification('複製失敗', true)\n        })\n    }\n    async function executeCaseQueryTool() {\n        const mainContainerId = 'qtMainContainer_vFinal';\n        if (document.getElementById(mainContainerId)) {\n            displaySystemNotification('查詢工具已開啟', true);\n            return\n        }\n        const selectedEnv = await createEnvSelectionDialog();\n        if (!selectedEnv) {\n            displaySystemNotification('操作已取消', true);\n            return\n        }\n        CURRENT_API_URL = selectedEnv === 'prod' ? API_URL_PROD : API_URL_UAT;\n        displaySystemNotification(`環境: ${selectedEnv==='prod'?'正式':'測試'}`);\n        if (!apiAuthToken) {\n            const tokenRes = await createTokenDialog();\n            if (tokenRes === null) {\n                displaySystemNotification('操作已取消', true);\n                return\n            }\n            if (tokenRes === '_QT_SKIP_') {\n                displaySystemNotification('已略過TOKEN輸入', false);\n                apiAuthToken = null\n            } else if (!tokenRes) {\n                displaySystemNotification('未提供TOKEN，查詢中止', true);\n                return\n            } else {\n                apiAuthToken = tokenRes;\n                localStorage.setItem(TOKEN_STORAGE_KEY, apiAuthToken)\n            }\n        }\n        const querySetupRes = await createQuerySetupDialog(selectedQueryDefinitionGlobal?.queryApiKey);\n        if (!querySetupRes) {\n            displaySystemNotification('操作已取消', true);\n            return\n        }\n        selectedQueryDefinitionGlobal = QUERYABLE_FIELD_DEFINITIONS.find(qdf => qdf.queryApiKey === querySetupRes.selectedApiKey);\n        const queryValuesRaw = querySetupRes.queryValues;\n        const queryValues = queryValuesRaw.split(/[\\s,;\\n]+/).map(x => x.trim().toUpperCase()).filter(Boolean);\n        if (queryValues.length === 0) {\n            displaySystemNotification('未輸入有效查詢值', true);\n            return\n        }\n        const loadingOverlay = document.createElement('div');\n        loadingOverlay.style.cssText = `position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:${Z_INDEX_DIALOG+1};display:flex;align-items:center;justify-content:center;font-family:\"Microsoft JhengHei\",Arial,sans-serif;`;\n        const loadingP = document.createElement('p');\n        loadingP.style.cssText = 'margin:0;color:#333;font-size:14px;font-weight:500;';\n        const loadingDiv = document.createElement('div');\n        loadingDiv.style.cssText = 'background:#fff;padding:20px 25px;border-radius:7px;text-align:center;box-shadow:0 3px 12px rgba(0,0,0,0.1);';\n        loadingDiv.innerHTML = `<div style=\"width:30px;height:30px;border:3px solid #e0e0e0;border-top:3px solid #007bff;border-radius:50%;animation:qtSpinAnimationFull 1s linear infinite;margin:0 auto 10px;\"></div>`;\n        loadingDiv.appendChild(loadingP);\n        loadingOverlay.appendChild(loadingDiv);\n        document.body.appendChild(loadingOverlay);\n        const loadingStyle = document.createElement('style');\n        loadingStyle.textContent = '@keyframes qtSpinAnimationFull{to{transform:rotate(360deg)}}';\n        document.head.appendChild(loadingStyle);\n        let fetchedResultsCollector = [];\n        let currentCounter = 1;\n        for (let i = 0; i < queryValues.length; i++) {\n            const singleQueryValue = queryValues[i];\n            loadingP.textContent = `查詢中: 第 ${i+1} / ${queryValues.length} 筆 (${singleQueryValue})...`;\n            const resultRowBase = {\n                'NO': String(currentCounter++),\n                '_queriedValue_': singleQueryValue\n            };\n            const apiResult = await performApiQuery(singleQueryValue);\n            let apiQueryStatus = '✗ 查詢失敗';\n            if (apiResult.error === 'token_invalid') {\n                apiQueryStatus = '✗ TOKEN失效';\n                loadingOverlay.remove();\n                const tokenRetryRes = await createTokenDialog();\n                if (tokenRetryRes === null || !tokenRetryRes || tokenRetryRes === '_QT_SKIP_') {\n                    apiAuthToken = null;\n                    displaySystemNotification(tokenRetryRes === null ? '操作取消' : 'TOKEN未更新/略過', true);\n                    if (tokenRetryRes === null) {\n                        if (loadingStyle) loadingStyle.remove();\n                        return\n                    }\n                } else {\n                    apiAuthToken = tokenRetryRes;\n                    localStorage.setItem(TOKEN_STORAGE_KEY, apiAuthToken)\n                }\n                if (document.body.contains(loadingOverlay)) loadingOverlay.style.display = 'flex';\n                else document.body.appendChild(loadingOverlay)\n            } else if (apiResult.success) {\n                apiQueryStatus = '✓ 成功'\n            } else if (!apiResult.error) {\n                apiQueryStatus = '✗ 查無資料'\n            }\n            resultRowBase._apiQueryStatus = apiQueryStatus;\n            if (apiResult.success && apiResult.data.records) {\n                apiResult.data.records.forEach(rec => {\n                    const popRow = { ...resultRowBase\n                    };\n                    const mainStatusVal = rec['mainStatus'] || '';\n                    const subStatusVal = rec['subStatus'] || '';\n                    popRow['_raw_mainStatus_'] = mainStatusVal;\n                    popRow['_raw_subStatus_'] = subStatusVal;\n                    ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(dKey => {\n                        const dN = FIELD_DISPLAY_NAMES_MAP[dKey] || dKey;\n                        let cVal = rec[dKey] === null || rec[dKey] === undefined ? '' : String(rec[dKey]);\n                        if (dKey === 'statusCombined') {\n                            popRow[dN] = `<span class=\"qt-status-main\">${escapeHtml(mainStatusVal)}</span><span class=\"qt-status-sub\">${escapeHtml(subStatusVal)}</span>`\n                        } else if (dKey === UNIT_MAP_FIELD_API_KEY) {\n                            const uVal = cVal;\n                            let uPre = '';\n                            for (let k = 0; k < uVal.length; k++) {\n                                if (/[A-Za-z]/.test(uVal.charAt(k))) {\n                                    uPre = uVal.charAt(k).toUpperCase();\n                                    break\n                                }\n                            }\n                            const mName = UNIT_CODE_MAPPINGS[uPre] || uVal;\n                            popRow[dN] = uPre ? `${uPre}-${mName.replace(/^[A-Za-z]-/,'')}` : mName\n                        } else if (dKey === 'uwApprover' || dKey === 'approvalUser') {\n                            popRow[dN] = extractName(cVal)\n                        } else {\n                            popRow[dN] = cVal\n                        }\n                    });\n                    popRow['查詢結果'] = apiQueryStatus;\n                    fetchedResultsCollector.push(popRow)\n                })\n            } else {\n                const failOrEmptyRow = { ...resultRowBase\n                };\n                ALL_DISPLAY_FIELDS_API_KEYS_MAIN.forEach(dKey => {\n                    const dN = FIELD_DISPLAY_NAMES_MAP[dKey] || dKey;\n                    if (dKey === 'statusCombined') {\n                        failOrEmptyRow['_raw_mainStatus_'] = '-';\n                        failOrEmptyRow['_raw_subStatus_'] = '';\n                        failOrEmptyRow[dN] = '-'\n                    } else {\n                        failOrEmptyRow[dN] = '-'\n                    }\n                });\n                if (selectedQueryDefinitionGlobal && FIELD_DISPLAY_NAMES_MAP[selectedQueryDefinitionGlobal.queryApiKey]) {\n                    failOrEmptyRow[FIELD_DISPLAY_NAMES_MAP[selectedQueryDefinitionGlobal.queryApiKey]] = singleQueryValue\n                }\n                failOrEmptyRow['查詢結果'] = apiQueryStatus;\n                fetchedResultsCollector.push(failOrEmptyRow)\n            }\n            if (queryValues.length > 1 && i < queryValues.length - 1) await new Promise(r => setTimeout(r, 250))\n        }\n        if (document.body.contains(loadingOverlay)) loadingOverlay.remove();\n        if (loadingStyle) loadingStyle.remove();\n        originalQueryResults = [...fetchedResultsCollector];\n        renderResultsTableUI(originalQueryResults)\n    }\n    loadTextSettings();\n    executeCaseQueryTool()\n})();"
  },
  {
    "id": "n703old.js",
    "description": "plan",
    "category": "plan",
    "type": "action",
    "action_script": "javascript:(function(){  var s=document.createElement('script');  s.src='https://cdn.jsdelivr.net/gh/k791031k/UAT/tools/n703old.js?v=%27+Date.now();  document.body.appendChild(s);})();"
  },
  {
    "id": "0plan0703v1.js",
    "description": "plan",
    "category": "plan",
    "type": "action",
    "action_script": "javascript:(function(){  var s=document.createElement('script');  s.src='https://cdn.jsdelivr.net/gh/k791031k/UAT/tools/0plan0703v1.js?v=%27+Date.now();%20%20document.body.appendChild(s);})();"
  },
  {
    "id": "1A.js",
    "description": "plan",
    "category": "plan",
    "type": "action",

    "action_script": "javascript:(function(){  var s=document.createElement('script');  s.src='https://cdn.jsdelivr.net/gh/k791031k/UAT/test/1A.js?v=%27+Date.now();%20%20document.body.appendChild(s);})();"
  },
  {
    "id": "A17-4.js",
    "description": "A17 報表工具 2",
    "category": "a17",
    "type": "action",
    "action_script": "https://cdn.jsdelivr.net/gh/k791031k/TRY/07-17-4.js?v=%27+Date.now();"
  }
]
